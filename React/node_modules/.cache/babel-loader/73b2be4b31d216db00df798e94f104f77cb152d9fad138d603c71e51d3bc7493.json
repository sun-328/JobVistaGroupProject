{"ast":null,"code":"// import React, { useState, useEffect, useRef } from \"react\";\n// import data from './Openings.json';\n// import { Text } from \"../Text/Text\";\n// import Style from '../TodayOpenings/TodayOpenings.module.css';\n// import { Image } from \"../ImageTag/Image\";\n// import { Heading } from \"../Heading/Heading\";\n// import { Input } from \"../Input/Input\";\n// import { Button } from \"../Button/Button\";\n\n// export const TodayOpenings = () => {\n\n//     const getPoints = useRef();\n//     const getStatus = useRef();\n//     const getTitle = useRef();\n//     const getDate = useRef();\n//     const getType = useRef();\n//     const getDuration = useRef();\n\n//     const [openingsJson, setOpeningsJson] = useState([]);\n//     const [selectOpening, setSelectOpening] = useState(-1);\n//     const [profile, setProfile] = useState(false);\n//     const [applicant, setApplicant] = useState([]);\n//     const [selectOption, setSelectOption] = useState(null);\n//     const [currentRound, setCurrentRound] = useState(1);\n//     const [maxRound, setMaxRound] = useState(1);\n//     const StatusRef = useRef();\n//     const [showPoints, setShowPoints] = useState(false);\n//     const [testId, setTestId] = useState(-1);\n//     const [openingId, setOpeningId] = useState(-1);\n//     const [applicantId, setApplicantId] = useState(-1);\n//     const [panelistId, setPanelistId] = useState(-1);\n//     const [name, setName] = useState(null);\n//     const [currentJson, setCurrentJson] = useState(null);\n//     const [roundView2, setRoundView2] = useState(false);\n//     const [currentTestJson, setCurrentTestJson] = useState(null);\n//     const [showApplicantsDet, setShowApplicantsDet] = useState(false);\n//     const [currApplicant, setCurrentApplicant] = useState({\n//         \"testId\": '',\n//         \"applicantId\": '',\n//         \"points\": '',\n//         \"status\": ''\n//     });\n//     const [newTest, setNewTest] = useState({\n//         \"title\": '',\n//         \"date\": '',\n//         \"type\": '',\n//         \"duration\": '',\n//         \"openingId\": ''\n//     })\n\n//     const [status, setStatus] = useState('');\n//     const [type, setType] = useState('');\n\n//     const [sampleName, setSampleName] = useState([]);\n\n//     const currentDate = new Date();\n//     const currYear = currentDate.getFullYear();\n//     const currMonth = currentDate.getMonth() < 10 ? '0' + (currentDate.getMonth() + 1) : (currentDate.getMonth() + 1);\n//     const currDate = currentDate.getDate() < 10 ? '0' + (currentDate.getDate()) : currentDate.getDate();\n//     const formatDate = `${currYear}-${currMonth}-${currDate}`;\n\n//     const viewProfile = (applicant) => {\n//         setProfile(true);\n//         setApplicant(applicant);\n//         // console.log(applicant.Name);\n//     }\n\n//     const handleChange = (event) => {\n//         setSelectOpening(parseInt(event.target.value));\n//     }\n\n//     const selectResult = (event) => {\n//         setSelectOption(event.target.value, () => {\n//             console.log(\"option: \", selectOption);\n//         });\n//     }\n\n//     const handlePointsChange = (fieldName, value, testId, applicantId, event, selectStatus) => {\n//         console.log(\"selectoption: \", selectStatus);\n//         console.log(\"option: \", selectOption);\n\n//         setCurrentApplicant({\n//             testId: testId,\n//             applicantId: applicantId,\n//             points: getPoints.current.value,\n//             status: StatusRef.current.value\n//         })\n//     };\n\n//     useEffect(() => {\n//         console.log(currApplicant);\n//     }, [currApplicant])\n\n//     useEffect(() => {\n//         const defaultValue = openingsJson.findIndex(element => (\n//             element.test.map((sampleTest, ind) => (\n//                 sampleTest.testDate === formatDate\n//             )\n//             )\n//         ))\n\n//         setSelectOpening(defaultValue)\n//     }, [formatDate, openingsJson, selectOpening])\n\n//     const fetchData = () => {\n//         fetch('http://localhost:8080/JobVista/PanelistOpeningServlet', {\n//             method: 'POST',\n//             headers: {\n//                 'Content-type': 'application/json'\n//             },\n//             body: JSON.stringify({ 'userDetails': JSON.parse(localStorage.getItem('userDetails')) })\n//         })\n//             .then((response) => {\n//                 if (!response.ok) {\n//                     throw new Error(`HTTP error status: ${response.status}`)\n//                 }\n\n//                 return response.json();\n//             })\n//             .then((result) => {\n//                 console.log(\"result \", result, \"\");\n//                 setOpeningsJson(result.Value.openings);\n//                 console.log(result, \"entry\");\n\n//             })\n//             .catch((error) => {\n//                 console.log(\"Error in get openings \", error);\n//             })\n//     }\n\n//     useEffect(() => {\n//         fetchData();\n//     }, [])\n\n//     useEffect(() => {\n//         console.log(\"openingJson: \", openingsJson);\n//     }, [openingsJson])\n\n//     const fetchCallForSettingPoints = () => {\n//         fetch(\"http://localhost:8080/JobVista/InterviewerSetMarksServlet\", {\n//             method: 'POST',\n//             headers: {\n//                 'Content-type': 'application/JSON'\n//             },\n//             body: JSON.stringify(currApplicant, { 'userDetails': JSON.parse(localStorage.getItem('userDetails')) })\n\n//         })\n//             .then(response => {\n//                 if (!response.ok) {\n//                     throw new Error(`HTTP error! Status: ${response.status}`);\n//                 }\n//                 return response.json();\n//             })\n//             .then(result => {\n\n//                 if (result.status == \"success\") {\n//                     alert(result.message);\n//                     setShowPoints(false);\n//                     setShowApplicantsDet(false);\n//                 }\n//                 else {\n//                     alert(result.message);\n//                 }\n//                 setSelectOption('');\n//             })\n//             .catch(error => {\n//                 console.error('Error fetching data:', error);\n//             });\n//     }\n\n//     useEffect(() => {\n//         if (selectOpening >= 0) {\n\n//             openingsJson[selectOpening].test.forEach((sampleTest) => {\n//                 if (sampleTest.templateRoundOn >= maxRound && sampleTest.testDate === formatDate) {\n//                     setMaxRound(sampleTest.templateRoundOn);\n//                 }\n//                 setTestId(sampleTest.testId);\n//                 setOpeningId(openingsJson[selectOpening].openingId);\n//                 setPanelistId(openingsJson[selectOpening].Panelist.panelistId);\n\n//             });\n\n//         }\n//     }, [selectOpening, openingsJson, maxRound]);\n\n//     // useEffect(() => {\n//     //     if (selectOpening >= 0) {\n//     //         fetchData()\n//     //         openingsJson[selectOpening].test.forEach((sampleTest) => {\n//     //             if (sampleTest.testDate === formatDate && sampleTest.templateRoundOn === currentRound) {\n//     //                 setCurrentTestJson(sampleTest);\n//     //             }\n\n//     //         });\n//     //     }\n//     // }, [selectOpening, currentRound]);\n\n//     let style;\n\n//     useEffect(() => {\n//         console.log(currentTestJson);\n//     }, [])\n\n//     const handleNextRound = () => {\n//         if (currentRound + 1 <= maxRound) {\n//             setCurrentRound(currentRound + 1);\n\n//             if (selectOpening >= 0) {\n//                 openingsJson[selectOpening].test.forEach((sampleTest) => {\n//                     if (sampleTest.templateRoundOn === currentRound + 1) {\n//                         setCurrentTestJson(sampleTest.applicants);\n//                     }\n//                 });\n//             }\n//         }\n//     };\n\n//     const handlePreviousRound = () => {\n//         if (currentRound > 1) {\n//             setCurrentRound(currentRound - 1);\n\n//             if (selectOpening >= 0) {\n//                 openingsJson[selectOpening].test.forEach((sampleTest) => {\n//                     if (sampleTest.templateRoundOn === currentRound - 1) {\n//                         setCurrentTestJson(sampleTest.applicants);\n//                     }\n//                 });\n//             }\n//         }\n//     };\n\n//     // useEffect(() => {\n//     //     console.log(\"currApplicant: \", currApplicant);\n//     // }, [currApplicant])\n\n//     const handleInput = (event) => {\n//         event.target.textContent = event.target.textContent.replace(/\\D/g, '');\n\n//     }\n\n//     const setPoints = (e) => {\n//         setShowApplicantsDet(true);\n//         // console.log(\"show: \", showApplicantsDet);\n//         setShowPoints(true);\n//     }\n\n//     const handleChangePoints = (e) => {\n//         const { name, value } = e.target;\n//         setCurrentApplicant(prev => ({ ...prev, [name]: value }));\n//         // console.log(currApplicant);\n//     }\n//     const settingPoints = () => {\n//         currApplicant.points = getPoints.current.value;\n//         currApplicant.status = getStatus.current.value;\n//         fetchCallForSettingPoints();\n//     }\n\n//     const changeRound = () => {\n//         setShowApplicantsDet(true);\n//         // setCurrentRound(currentRound + 1);\n//         setRoundView2(true);\n\n//     }\n//     const handle = (id, name) => {\n//         currApplicant.applicantId = id;\n//         currApplicant.testId = testId;\n//         setName(name);\n//     }\n\n//     const addingRound = () => {\n//         const title = getTitle.current.value;\n//         newTest.title = getTitle.current.value;\n//         newTest.date = getDate.current.value;\n//         newTest.type = getType.current.value;\n//         newTest.duration = getDuration.current.value;\n//         newTest.openingId = openingId;\n//         const currentPanelistId = JSON.parse(localStorage.userDetails);\n//         if (panelistId === currentPanelistId.Panelist_Id) {\n//             fetchCallForAddingTest();\n//         }\n//         else {\n//             alert(\"You can't add tests\");\n//         }\n\n//     }\n\n//     const cancelRound = () => {\n//         setShowApplicantsDet(false);\n//         setRoundView2(false);\n//     }\n\n//     const fetchCallForAddingTest = () => {\n//         fetch(\"http://localhost:8080/JobVista/AddTestToOpening\", {\n//             method: 'POST',\n//             headers: {\n//                 'Content-type': 'application/JSON'\n//             },\n//             body: JSON.stringify(newTest, { 'userDetails': JSON.parse(localStorage.getItem('userDetails')) })\n\n//         })\n//             .then(response => {\n//                 if (!response.ok) {\n//                     throw new Error(`HTTP error! Status: ${response.status}`);\n//                 }\n//                 return response.json();\n//             })\n//             .then(result => {\n//                 // console.log(\"yes!\");\n//                 if (result.status == \"success\") {\n//                     alert(result.message);\n//                     setRoundView2(false);\n//                     // setShowPoints(false);\n//                     // setShowApplicantsDet(false);\n//                 }\n//                 else {\n//                     alert(result.message);\n//                 }\n//                 setSelectOption('');\n//             })\n//             .catch(error => {\n//                 console.error('Error fetching data:', error);\n//             });\n//     }\n\n//     const cancel = () => {\n//         setShowPoints(false);\n//         setShowApplicantsDet(false);\n//     }\n\n//     return (\n//         <div>\n//             <div id={Style.mainDiv}>\n//                 <select id={Style.select} onChange={handleChange}>\n//                     {openingsJson.length > 0 && openingsJson.map((opening, index) => (\n//                         opening.test.map((sampleTest, ind) => (\n//                             sampleTest.testDate === formatDate && (\n\n//                                 <React.Fragment key={ind}>\n\n//                                     <option value={ind}>{opening.description}</option>\n//                                     {/* <option value={ind}>{sampleTest.templateRoundOn}</option> */}\n//                                 </React.Fragment>\n//                             )\n//                         ))\n//                     ))}\n//                 </select>\n//                 <i class=\"fa-solid fa-square-plus\" id={Style.plusIcon} onClick={changeRound}></i>\n//             </div>\n\n//             <div id={Style.level}>\n//                 <i id={style} className=\"fa-solid fa-chevron-left\" onClick={handlePreviousRound} disabled={currentRound === 1}></i>\n//                 <Text>\n\n//                     Round {currentRound}\n\n//                 </Text>\n//                 <i id={style} className=\"fa-solid fa-chevron-right\" onClick={handleNextRound}></i>\n\n//             </div>\n\n//             {roundView2 && (\n//                 <div id={Style.addRound2}>\n//                     <div id={Style.addContainer}>\n//                         <div className={Style.addDiv}>\n//                             <p className={Style.commonText}>Test Name</p>\n//                             <p className={Style.commonText}>Date</p>\n//                             <p className={Style.commonText}>Test Duration</p>\n//                             <p className={Style.commonText}>Test Type</p>\n//                         </div>\n//                         <div className={Style.addDiv}>\n//                             <input ref={getTitle} type=\"text\" name=\"title\" className={`${Style.inputDiv} ${Style.commonText}`} />\n//                             <input ref={getDate} type=\"date\" name=\"date\" className={`${Style.inputDiv} ${Style.commonText}`} />\n//                             <input ref={getDuration} type=\"number\" name=\"duration\" className={`${Style.inputDiv} ${Style.commonText}`} />\n//                             <input ref={getType} className={`${Style.space} ${Style.inputDiv} ${Style.commonText}`} list='result' name={type} />\n//                             <datalist id='result'>\n//                                 <option value='Written' />\n//                                 <option value='FaceToFace' />\n//                             </datalist>\n//                         </div>\n//                     </div>\n//                     <div id={Style.butContainer}>\n//                         <button onClick={cancelRound} className={Style.cancelBut}>Cancel</button>\n//                         <button onClick={addingRound}>Add</button>\n//                     </div>\n//                 </div>\n//             )\n//             }\n\n//             {showPoints && (\n//                 <div>\n//                     <Heading>Name: </Heading> <Text>{name}</Text>\n//                     <Heading>Points: </Heading>\n//                     <input ref={getPoints} type=\"number\" name=\"points\" />\n//                     <input ref={getStatus} className={Style.space} list='result' name={status} />\n//                     <datalist id='result'>\n//                         <option value='Selected' />\n//                         <option value='Onhold' />\n//                         <option value='Rejected' />\n//                     </datalist>\n//                     <button onClick={cancel} className={Style.cancelBut}>Cancel</button>\n//                     <button onClick={settingPoints}>Submit</button>\n//                 </div>\n//             )}\n\n//             {!showApplicantsDet && selectOpening !== null && (\n//                 <div id={Style.scrollContainer}>\n//                     <table id={Style.tabletag}>\n\n//                         <tr className={`${Style.trTag} ${Style.jobSeekerTr}`}>\n//                             <th className={Style.jobSeekerName}>Name</th>\n//                             <th id={Style.jobSeekerEmailId}>Email</th>\n//                             <th className={Style.jobSeekerDOB}>DOB</th>\n//                             <th className={Style.jobSeekerGender}>Gender</th>\n//                             <th className={Style.jobSeekerExperience}>Experience</th>\n//                         </tr>\n\n//                         {currentRound === 1 && selectOpening >= 0 && openingsJson[selectOpening].applicants.length > 0 && openingsJson[selectOpening].applicants.map((sampleTest, ind) => {\n//                             return (\n//                                 <tr key={ind} onClick={() => { setPoints(); handle(sampleTest.Applicant_Id, sampleTest.jobSeekerName); }} className={Style.jobSeekerTr}>\n//                                     <td className={Style.jobSeekerName}>{sampleTest.jobSeekerName}</td>\n//                                     <td className={Style.jobSeekerEmail}>{sampleTest.jobSeekerEmail}</td>\n//                                     <td className={Style.jobSeekerDOB}>{sampleTest.jobSeekerDOB}</td>\n//                                     <td className={Style.jobSeekerGender}>{sampleTest.jobSeekerGender}</td>\n//                                     <td className={Style.jobSeekerExperience}>{sampleTest.jobSeekerExperience}</td>\n//                                 </tr>\n//                             )\n//                         })}\n\n//                         {/* {console.log(currentRound)} */}\n//                         {console.log(\"currentRoundjson: \", currentTestJson)}\n//                         {currentRound > 1 && selectOpening >= 0 && currentTestJson && currentTestJson.length > 0 && (\n\n//                             currentTestJson.map((currTest, index) => {\n//                                 // {console.log(\"json\" , currTest)}\n//                                 if (currTest.templateRoundOn === currentRound - 1 && currTest.applicants && currTest.applicants.length > 0) {\n//                                     // {console.log(currTest)}\n//                                     return currTest.applicants[0].map((currApplicant, ind) => {\n//                                         // {console.log(\"appli \" , currApplicant)}\n//                                         if (currApplicant.Status === \"Onhold\") {\n\n//                                             return (\n//                                                 <tr key={ind} onClick={() => { setPoints(); handle(currApplicant.Applicant_Id, currApplicant.Name); }} className={Style.hover}>\n//                                                     <td>{currApplicant.Name}</td>\n//                                                     <td>{currApplicant.Email}</td>\n//                                                     <td>{currApplicant.DOB}</td>\n//                                                     <td>{currApplicant.Gender}</td>\n//                                                     <td>{currApplicant.Experience}</td>\n//                                                     <td className={Style.icon}><i onClick={() => viewProfile(currApplicant.Name)} id={Style.icon} className=\"fa-solid fa-circle-info\"></i></td>\n//                                                 </tr>\n//                                             );\n//                                         }\n//                                         return null;\n//                                     });\n//                                 }\n//                                 return null;\n//                             })\n//                         )}\n\n//                     </table>\n//                 </div>\n//             )}\n\n//             {profile && (\n//                 <div id={Style.viewProfile}>\n//                     <i className=\"fa-solid fa-circle-xmark\" onClick={() => setProfile(false)} id={Style.crossBtn}></i>\n//                     <Image id={Style.img} src='../../Images/user.png' />\n\n//                     <Heading id={Style.name}>{applicant.Name} - <Text id={Style.email}>{applicant.Email}</Text></Heading>\n//                     <Text className={Style.fntSize}>Contact - {applicant.Phone}</Text>\n//                     {/* <ul>\n//                         <li className={Style.fontSize}>Social Media Resources: </li>\n//                         {Object.entries(applicant.socialMediaResorse).map(([key, value]) => (\n//                             <li className={Style.fntSize} key={key}>{key}: {value}</li>\n//                         ))}\n//                     </ul> */}\n//                 </div>\n//             )}\n\n//         </div>\n//     );\n\n// }\n\nimport React from \"react\";","map":{"version":3,"names":["React"],"sources":["/home/abi-zstk360/Downloads/RecruitmentProject/Project/myproject/src/Components/TodayOpenings/TodayOpening.js"],"sourcesContent":["// import React, { useState, useEffect, useRef } from \"react\";\n// import data from './Openings.json';\n// import { Text } from \"../Text/Text\";\n// import Style from '../TodayOpenings/TodayOpenings.module.css';\n// import { Image } from \"../ImageTag/Image\";\n// import { Heading } from \"../Heading/Heading\";\n// import { Input } from \"../Input/Input\";\n// import { Button } from \"../Button/Button\";\n\n// export const TodayOpenings = () => {\n\n//     const getPoints = useRef();\n//     const getStatus = useRef();\n//     const getTitle = useRef();\n//     const getDate = useRef();\n//     const getType = useRef();\n//     const getDuration = useRef();\n\n//     const [openingsJson, setOpeningsJson] = useState([]);\n//     const [selectOpening, setSelectOpening] = useState(-1);\n//     const [profile, setProfile] = useState(false);\n//     const [applicant, setApplicant] = useState([]);\n//     const [selectOption, setSelectOption] = useState(null);\n//     const [currentRound, setCurrentRound] = useState(1);\n//     const [maxRound, setMaxRound] = useState(1);\n//     const StatusRef = useRef();\n//     const [showPoints, setShowPoints] = useState(false);\n//     const [testId, setTestId] = useState(-1);\n//     const [openingId, setOpeningId] = useState(-1);\n//     const [applicantId, setApplicantId] = useState(-1);\n//     const [panelistId, setPanelistId] = useState(-1);\n//     const [name, setName] = useState(null);\n//     const [currentJson, setCurrentJson] = useState(null);\n//     const [roundView2, setRoundView2] = useState(false);\n//     const [currentTestJson, setCurrentTestJson] = useState(null);\n//     const [showApplicantsDet, setShowApplicantsDet] = useState(false);\n//     const [currApplicant, setCurrentApplicant] = useState({\n//         \"testId\": '',\n//         \"applicantId\": '',\n//         \"points\": '',\n//         \"status\": ''\n//     });\n//     const [newTest, setNewTest] = useState({\n//         \"title\": '',\n//         \"date\": '',\n//         \"type\": '',\n//         \"duration\": '',\n//         \"openingId\": ''\n//     })\n\n//     const [status, setStatus] = useState('');\n//     const [type, setType] = useState('');\n\n//     const [sampleName, setSampleName] = useState([]);\n\n//     const currentDate = new Date();\n//     const currYear = currentDate.getFullYear();\n//     const currMonth = currentDate.getMonth() < 10 ? '0' + (currentDate.getMonth() + 1) : (currentDate.getMonth() + 1);\n//     const currDate = currentDate.getDate() < 10 ? '0' + (currentDate.getDate()) : currentDate.getDate();\n//     const formatDate = `${currYear}-${currMonth}-${currDate}`;\n\n//     const viewProfile = (applicant) => {\n//         setProfile(true);\n//         setApplicant(applicant);\n//         // console.log(applicant.Name);\n//     }\n\n//     const handleChange = (event) => {\n//         setSelectOpening(parseInt(event.target.value));\n//     }\n\n//     const selectResult = (event) => {\n//         setSelectOption(event.target.value, () => {\n//             console.log(\"option: \", selectOption);\n//         });\n//     }\n\n//     const handlePointsChange = (fieldName, value, testId, applicantId, event, selectStatus) => {\n//         console.log(\"selectoption: \", selectStatus);\n//         console.log(\"option: \", selectOption);\n\n//         setCurrentApplicant({\n//             testId: testId,\n//             applicantId: applicantId,\n//             points: getPoints.current.value,\n//             status: StatusRef.current.value\n//         })\n//     };\n\n//     useEffect(() => {\n//         console.log(currApplicant);\n//     }, [currApplicant])\n\n\n\n//     useEffect(() => {\n//         const defaultValue = openingsJson.findIndex(element => (\n//             element.test.map((sampleTest, ind) => (\n//                 sampleTest.testDate === formatDate\n//             )\n//             )\n//         ))\n\n//         setSelectOpening(defaultValue)\n//     }, [formatDate, openingsJson, selectOpening])\n\n//     const fetchData = () => {\n//         fetch('http://localhost:8080/JobVista/PanelistOpeningServlet', {\n//             method: 'POST',\n//             headers: {\n//                 'Content-type': 'application/json'\n//             },\n//             body: JSON.stringify({ 'userDetails': JSON.parse(localStorage.getItem('userDetails')) })\n//         })\n//             .then((response) => {\n//                 if (!response.ok) {\n//                     throw new Error(`HTTP error status: ${response.status}`)\n//                 }\n\n//                 return response.json();\n//             })\n//             .then((result) => {\n//                 console.log(\"result \", result, \"\");\n//                 setOpeningsJson(result.Value.openings);\n//                 console.log(result, \"entry\");\n\n//             })\n//             .catch((error) => {\n//                 console.log(\"Error in get openings \", error);\n//             })\n//     }\n\n//     useEffect(() => {\n//         fetchData();\n//     }, [])\n\n//     useEffect(() => {\n//         console.log(\"openingJson: \", openingsJson);\n//     }, [openingsJson])\n\n//     const fetchCallForSettingPoints = () => {\n//         fetch(\"http://localhost:8080/JobVista/InterviewerSetMarksServlet\", {\n//             method: 'POST',\n//             headers: {\n//                 'Content-type': 'application/JSON'\n//             },\n//             body: JSON.stringify(currApplicant, { 'userDetails': JSON.parse(localStorage.getItem('userDetails')) })\n\n//         })\n//             .then(response => {\n//                 if (!response.ok) {\n//                     throw new Error(`HTTP error! Status: ${response.status}`);\n//                 }\n//                 return response.json();\n//             })\n//             .then(result => {\n\n//                 if (result.status == \"success\") {\n//                     alert(result.message);\n//                     setShowPoints(false);\n//                     setShowApplicantsDet(false);\n//                 }\n//                 else {\n//                     alert(result.message);\n//                 }\n//                 setSelectOption('');\n//             })\n//             .catch(error => {\n//                 console.error('Error fetching data:', error);\n//             });\n//     }\n\n\n\n//     useEffect(() => {\n//         if (selectOpening >= 0) {\n\n//             openingsJson[selectOpening].test.forEach((sampleTest) => {\n//                 if (sampleTest.templateRoundOn >= maxRound && sampleTest.testDate === formatDate) {\n//                     setMaxRound(sampleTest.templateRoundOn);\n//                 }\n//                 setTestId(sampleTest.testId);\n//                 setOpeningId(openingsJson[selectOpening].openingId);\n//                 setPanelistId(openingsJson[selectOpening].Panelist.panelistId);\n\n//             });\n\n\n//         }\n//     }, [selectOpening, openingsJson, maxRound]);\n\n//     // useEffect(() => {\n//     //     if (selectOpening >= 0) {\n//     //         fetchData()\n//     //         openingsJson[selectOpening].test.forEach((sampleTest) => {\n//     //             if (sampleTest.testDate === formatDate && sampleTest.templateRoundOn === currentRound) {\n//     //                 setCurrentTestJson(sampleTest);\n//     //             }\n\n//     //         });\n//     //     }\n//     // }, [selectOpening, currentRound]);\n\n\n//     let style;\n\n//     useEffect(() => {\n//         console.log(currentTestJson);\n//     }, [])\n\n//     const handleNextRound = () => {\n//         if (currentRound + 1 <= maxRound) {\n//             setCurrentRound(currentRound + 1);\n\n//             if (selectOpening >= 0) {\n//                 openingsJson[selectOpening].test.forEach((sampleTest) => {\n//                     if (sampleTest.templateRoundOn === currentRound + 1) {\n//                         setCurrentTestJson(sampleTest.applicants);\n//                     }\n//                 });\n//             }\n//         }\n//     };\n\n\n//     const handlePreviousRound = () => {\n//         if (currentRound > 1) {\n//             setCurrentRound(currentRound - 1);\n\n//             if (selectOpening >= 0) {\n//                 openingsJson[selectOpening].test.forEach((sampleTest) => {\n//                     if (sampleTest.templateRoundOn === currentRound - 1) {\n//                         setCurrentTestJson(sampleTest.applicants);\n//                     }\n//                 });\n//             }\n//         }\n//     };\n\n\n//     // useEffect(() => {\n//     //     console.log(\"currApplicant: \", currApplicant);\n//     // }, [currApplicant])\n\n//     const handleInput = (event) => {\n//         event.target.textContent = event.target.textContent.replace(/\\D/g, '');\n\n//     }\n\n//     const setPoints = (e) => {\n//         setShowApplicantsDet(true);\n//         // console.log(\"show: \", showApplicantsDet);\n//         setShowPoints(true);\n//     }\n\n//     const handleChangePoints = (e) => {\n//         const { name, value } = e.target;\n//         setCurrentApplicant(prev => ({ ...prev, [name]: value }));\n//         // console.log(currApplicant);\n//     }\n//     const settingPoints = () => {\n//         currApplicant.points = getPoints.current.value;\n//         currApplicant.status = getStatus.current.value;\n//         fetchCallForSettingPoints();\n//     }\n\n//     const changeRound = () => {\n//         setShowApplicantsDet(true);\n//         // setCurrentRound(currentRound + 1);\n//         setRoundView2(true);\n\n//     }\n//     const handle = (id, name) => {\n//         currApplicant.applicantId = id;\n//         currApplicant.testId = testId;\n//         setName(name);\n//     }\n\n//     const addingRound = () => {\n//         const title = getTitle.current.value;\n//         newTest.title = getTitle.current.value;\n//         newTest.date = getDate.current.value;\n//         newTest.type = getType.current.value;\n//         newTest.duration = getDuration.current.value;\n//         newTest.openingId = openingId;\n//         const currentPanelistId = JSON.parse(localStorage.userDetails);\n//         if (panelistId === currentPanelistId.Panelist_Id) {\n//             fetchCallForAddingTest();\n//         }\n//         else {\n//             alert(\"You can't add tests\");\n//         }\n\n\n//     }\n\n//     const cancelRound = () => {\n//         setShowApplicantsDet(false);\n//         setRoundView2(false);\n//     }\n\n//     const fetchCallForAddingTest = () => {\n//         fetch(\"http://localhost:8080/JobVista/AddTestToOpening\", {\n//             method: 'POST',\n//             headers: {\n//                 'Content-type': 'application/JSON'\n//             },\n//             body: JSON.stringify(newTest, { 'userDetails': JSON.parse(localStorage.getItem('userDetails')) })\n\n//         })\n//             .then(response => {\n//                 if (!response.ok) {\n//                     throw new Error(`HTTP error! Status: ${response.status}`);\n//                 }\n//                 return response.json();\n//             })\n//             .then(result => {\n//                 // console.log(\"yes!\");\n//                 if (result.status == \"success\") {\n//                     alert(result.message);\n//                     setRoundView2(false);\n//                     // setShowPoints(false);\n//                     // setShowApplicantsDet(false);\n//                 }\n//                 else {\n//                     alert(result.message);\n//                 }\n//                 setSelectOption('');\n//             })\n//             .catch(error => {\n//                 console.error('Error fetching data:', error);\n//             });\n//     }\n\n//     const cancel = () => {\n//         setShowPoints(false);\n//         setShowApplicantsDet(false);\n//     }\n\n\n\n//     return (\n//         <div>\n//             <div id={Style.mainDiv}>\n//                 <select id={Style.select} onChange={handleChange}>\n//                     {openingsJson.length > 0 && openingsJson.map((opening, index) => (\n//                         opening.test.map((sampleTest, ind) => (\n//                             sampleTest.testDate === formatDate && (\n\n//                                 <React.Fragment key={ind}>\n\n//                                     <option value={ind}>{opening.description}</option>\n//                                     {/* <option value={ind}>{sampleTest.templateRoundOn}</option> */}\n//                                 </React.Fragment>\n//                             )\n//                         ))\n//                     ))}\n//                 </select>\n//                 <i class=\"fa-solid fa-square-plus\" id={Style.plusIcon} onClick={changeRound}></i>\n//             </div>\n\n//             <div id={Style.level}>\n//                 <i id={style} className=\"fa-solid fa-chevron-left\" onClick={handlePreviousRound} disabled={currentRound === 1}></i>\n//                 <Text>\n\n//                     Round {currentRound}\n\n//                 </Text>\n//                 <i id={style} className=\"fa-solid fa-chevron-right\" onClick={handleNextRound}></i>\n\n//             </div>\n\n//             {roundView2 && (\n//                 <div id={Style.addRound2}>\n//                     <div id={Style.addContainer}>\n//                         <div className={Style.addDiv}>\n//                             <p className={Style.commonText}>Test Name</p>\n//                             <p className={Style.commonText}>Date</p>\n//                             <p className={Style.commonText}>Test Duration</p>\n//                             <p className={Style.commonText}>Test Type</p>\n//                         </div>\n//                         <div className={Style.addDiv}>\n//                             <input ref={getTitle} type=\"text\" name=\"title\" className={`${Style.inputDiv} ${Style.commonText}`} />\n//                             <input ref={getDate} type=\"date\" name=\"date\" className={`${Style.inputDiv} ${Style.commonText}`} />\n//                             <input ref={getDuration} type=\"number\" name=\"duration\" className={`${Style.inputDiv} ${Style.commonText}`} />\n//                             <input ref={getType} className={`${Style.space} ${Style.inputDiv} ${Style.commonText}`} list='result' name={type} />\n//                             <datalist id='result'>\n//                                 <option value='Written' />\n//                                 <option value='FaceToFace' />\n//                             </datalist>\n//                         </div>\n//                     </div>\n//                     <div id={Style.butContainer}>\n//                         <button onClick={cancelRound} className={Style.cancelBut}>Cancel</button>\n//                         <button onClick={addingRound}>Add</button>\n//                     </div>\n//                 </div>\n//             )\n//             }\n\n//             {showPoints && (\n//                 <div>\n//                     <Heading>Name: </Heading> <Text>{name}</Text>\n//                     <Heading>Points: </Heading>\n//                     <input ref={getPoints} type=\"number\" name=\"points\" />\n//                     <input ref={getStatus} className={Style.space} list='result' name={status} />\n//                     <datalist id='result'>\n//                         <option value='Selected' />\n//                         <option value='Onhold' />\n//                         <option value='Rejected' />\n//                     </datalist>\n//                     <button onClick={cancel} className={Style.cancelBut}>Cancel</button>\n//                     <button onClick={settingPoints}>Submit</button>\n//                 </div>\n//             )}\n\n//             {!showApplicantsDet && selectOpening !== null && (\n//                 <div id={Style.scrollContainer}>\n//                     <table id={Style.tabletag}>\n\n//                         <tr className={`${Style.trTag} ${Style.jobSeekerTr}`}>\n//                             <th className={Style.jobSeekerName}>Name</th>\n//                             <th id={Style.jobSeekerEmailId}>Email</th>\n//                             <th className={Style.jobSeekerDOB}>DOB</th>\n//                             <th className={Style.jobSeekerGender}>Gender</th>\n//                             <th className={Style.jobSeekerExperience}>Experience</th>\n//                         </tr>\n\n//                         {currentRound === 1 && selectOpening >= 0 && openingsJson[selectOpening].applicants.length > 0 && openingsJson[selectOpening].applicants.map((sampleTest, ind) => {\n//                             return (\n//                                 <tr key={ind} onClick={() => { setPoints(); handle(sampleTest.Applicant_Id, sampleTest.jobSeekerName); }} className={Style.jobSeekerTr}>\n//                                     <td className={Style.jobSeekerName}>{sampleTest.jobSeekerName}</td>\n//                                     <td className={Style.jobSeekerEmail}>{sampleTest.jobSeekerEmail}</td>\n//                                     <td className={Style.jobSeekerDOB}>{sampleTest.jobSeekerDOB}</td>\n//                                     <td className={Style.jobSeekerGender}>{sampleTest.jobSeekerGender}</td>\n//                                     <td className={Style.jobSeekerExperience}>{sampleTest.jobSeekerExperience}</td>\n//                                 </tr>\n//                             )\n//                         })}\n\n//                         {/* {console.log(currentRound)} */}\n//                         {console.log(\"currentRoundjson: \", currentTestJson)}\n//                         {currentRound > 1 && selectOpening >= 0 && currentTestJson && currentTestJson.length > 0 && (\n\n//                             currentTestJson.map((currTest, index) => {\n//                                 // {console.log(\"json\" , currTest)}\n//                                 if (currTest.templateRoundOn === currentRound - 1 && currTest.applicants && currTest.applicants.length > 0) {\n//                                     // {console.log(currTest)}\n//                                     return currTest.applicants[0].map((currApplicant, ind) => {\n//                                         // {console.log(\"appli \" , currApplicant)}\n//                                         if (currApplicant.Status === \"Onhold\") {\n\n//                                             return (\n//                                                 <tr key={ind} onClick={() => { setPoints(); handle(currApplicant.Applicant_Id, currApplicant.Name); }} className={Style.hover}>\n//                                                     <td>{currApplicant.Name}</td>\n//                                                     <td>{currApplicant.Email}</td>\n//                                                     <td>{currApplicant.DOB}</td>\n//                                                     <td>{currApplicant.Gender}</td>\n//                                                     <td>{currApplicant.Experience}</td>\n//                                                     <td className={Style.icon}><i onClick={() => viewProfile(currApplicant.Name)} id={Style.icon} className=\"fa-solid fa-circle-info\"></i></td>\n//                                                 </tr>\n//                                             );\n//                                         }\n//                                         return null;\n//                                     });\n//                                 }\n//                                 return null;\n//                             })\n//                         )}\n\n\n\n\n//                     </table>\n//                 </div>\n//             )}\n\n//             {profile && (\n//                 <div id={Style.viewProfile}>\n//                     <i className=\"fa-solid fa-circle-xmark\" onClick={() => setProfile(false)} id={Style.crossBtn}></i>\n//                     <Image id={Style.img} src='../../Images/user.png' />\n\n//                     <Heading id={Style.name}>{applicant.Name} - <Text id={Style.email}>{applicant.Email}</Text></Heading>\n//                     <Text className={Style.fntSize}>Contact - {applicant.Phone}</Text>\n//                     {/* <ul>\n//                         <li className={Style.fontSize}>Social Media Resources: </li>\n//                         {Object.entries(applicant.socialMediaResorse).map(([key, value]) => (\n//                             <li className={Style.fntSize} key={key}>{key}: {value}</li>\n//                         ))}\n//                     </ul> */}\n//                 </div>\n//             )}\n\n\n\n\n\n//         </div>\n//     );\n\n// }\n\n\n\nimport React from \"react\";\n\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAMA;AACA;;AAEA;;AAIA,OAAOA,KAAK,MAAM,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import data from './Openings.json';\n// import { Text } from \"../Text/Text\";\n// import Style from '../TodayOpenings/TodayOpenings.module.css';\n// import { Image } from \"../ImageTag/Image\";\n// import { Heading } from \"../Heading/Heading\";\n\n// export const TodayOpenings = () => {\n\n//     const [openingsJson, setOpeningsJson] = useState([]);\n//     const [selectOpening, setSelectOpening] = useState(-1);\n//     const [profile, setProfile] = useState(false);\n//     const [applicant, setApplicant] = useState([]);\n//     const [selectOption, setSelectOption] = useState(null);\n\n//     const currentDate = new Date();\n//     const currYear = currentDate.getFullYear();\n//     const currMonth = currentDate.getMonth() < 10 ? '0' + (currentDate.getMonth() + 1) : (currentDate.getMonth() + 1);\n//     const currDate = currentDate.getDate() < 10 ? '0' + (currentDate.getDate()) : currentDate.getDate();\n//     const formatDate = `${currYear}-${currMonth}-${currDate}`;\n\n//     const viewProfile = (applicant) => {\n//         setProfile(true);\n//         setApplicant(applicant);\n//     }\n\n//     const handleChange = (event) => {\n//         setSelectOpening(event.target.value);\n//         // console.log(selectOpening);\n//     }\n\n//     const selectResult = (event) => {\n//         setSelectOption(event.target.value);\n//     }\n\n//     useEffect(() => {\n//         const defaultValue = openingsJson.findIndex(element => (\n//             // element.test.some(test => test.Date === formatDate)\n//             element.test.map((sampleTest, ind) => (\n//                 sampleTest.testDate === formatDate\n//             )\n//         )\n//         ))\n//         console.log(\"default: \" , defaultValue);\n//         console.log(selectOpening);\n//         setSelectOpening(defaultValue)\n//         console.log(\"select \" , selectOpening >= 0);\n//         // if(defaultValue >= 0){\n//         //     console.log(\"applicants: \" , openingsJson[defaultValue].applicants[0].map((applicant, idx) => (console.log(applicant.jobSeekerName))));\n\n//         // }\n//         // console.log(\"applicants: \" , openingsJson[defaultValue].applicants);\n\n//     //     opening.test.map((sampleTest, ind) => (\n//     //         sampleTest.testDate === formatDate\n//     // )\n\n//     }, [formatDate, openingsJson, selectOpening])\n\n//     const fetchData = () => {\n//             fetch('http://localhost:8080/JobVista/PanelistOpeningServlet', {\n//                 method: 'GET',\n//                 headers: {\n//                     'Content-type': 'application/json'\n//                 }\n//             })\n//                 .then((response) => {\n//                     if (!response.ok) {\n//                         throw new Error(`HTTP error status: ${response.status}`)\n//                     }\n//                     return response.json();\n//                 })\n//                 .then((result) => {\n//                     console.log(result.Value.upComingOpenings[0].test[0].applicants[0]);\n//                     console.log(\"upcoming: \" , result.Value.upComingOpenings[0].test);\n//                     setOpeningsJson(result.Value.upComingOpenings);\n\n//                     result.Value.upComingOpenings[0].test.map((sampleTest, ind) => {\n\n//                             sampleTest.applicants[0].map((sample, idx) => {\n//                                 console.log(\"name: \", sample.Name);\n//                             });\n\n//                     });\n//                 })\n//                 .catch((error) => {\n//                     console.log(\"Error in get openings \", error);\n//                 })\n//         }\n\n//         useEffect(() => {\n//             fetchData();\n//         }, [])\n\n//         useEffect (() => {\n//             console.log(\"selectOpening: \" , selectOpening);\n\n//             if(selectOpening >= 0){\n\n//                 // openingsJson[selectOpening].test.map((sampleTest, ind) => {\n//                 //     sampleTest.applicants[0].map((sample, idx) => {\n//                 //         console.log(sample.Name);\n//                 //     });\n//                 //     console.log(\"applicants:\");\n//                 // });\n//             }\n//         }, [selectOpening, openingsJson])\n\n//     return (\n//         <div>\n\n//             <select id={Style.select} onChange={handleChange}>\n//                 {openingsJson.map((opening, index) => (\n//                     opening.test.map((sampleTest, ind) => (\n//                         sampleTest.testDate === formatDate && (\n//                             <option key={ind} value={ind}>{sampleTest.testTitle}</option>\n\n//                         )\n//                     ))\n//                 ))}\n\n//             </select>\n\n//             <div id={Style.level}>\n//                 <i class=\"fa-solid fa-chevron-left\"></i>\n\n//                 <Text>Level 1</Text>\n\n//                 {/* {openingsJson.map((element, index) => (\n//                     <Text>Level{element.test[index].roundOn}</Text>\n//                 ))} */}\n\n//                 <i class=\"fa-solid fa-chevron-right\"></i>\n//             </div>\n\n//             {selectOpening !== null && (\n//                 <table>\n\n//                     <tr>\n//                         <th>Name</th>\n//                         <th>Email</th>\n//                         <th>Mobile Number</th>\n//                         <th>Points</th>\n//                         <th>Result</th>\n//                         <th></th>\n//                     </tr>\n//                     <h1>SelectOpening {selectOpening}</h1>\n//                     {selectOpening >= 0 && openingsJson[selectOpening].test > 0 && openingsJson[selectOpening].test.map((sampleTest, ind) => (\n//                         sampleTest.applicants[0].length > 0 && sampleTest.applicants[0].map((sample, idx) => {\n//                             <div>\n\n//                            <tr key={idx} className={Style.hover}>\n//                                 <td>{sample[0].Name}</td>\n//                                 <td>{sample.Email}</td>\n//                                 <td>{sample.Phone}</td>\n//                                 <td>{sample.Points}</td>\n//                                 <td>\n//                                     {!selectOption && (\n//                                         <select onChange={selectResult}>\n//                                             <option>Select</option>\n//                                             <option>Onhold</option>\n//                                             <option>Reject</option>\n//                                         </select>\n//                                     )}\n//                                     {console.log(selectOption)}\n//                                     {selectOption && (\n//                                         <p onClick={() => setSelectOption(false)} id={Style.selectOption}>{selectOption}</p>\n//                                     )}\n//                                 </td>\n//                                 <td className={Style.icon}><i onClick={() => viewProfile(applicant)} id={Style.icon} class=\"fa-solid fa-circle-info\"></i></td>\n\n//                             </tr>\n//                             </div>\n//             })))}\n\n//                     {profile ?\n//                         <div id={Style.viewProfile}>\n//                             <i class=\"fa-solid fa-circle-xmark\" onClick={() => setProfile(false)} id={Style.crossBtn}></i>\n\n//                             <Image id={Style.img} src='../../Images/user.png' />\n\n//                             <Heading id={Style.name}>{applicant.name} - <Text id={Style.email}>{applicant.email}</Text></Heading>\n\n//                             <Text className={Style.fntSize}>Contact - {applicant.mobileNumber}</Text>\n\n//                             <ul>\n//                                 <li className={Style.fontSize}>Social Media Resources: </li>\n//                                 {Object.entries(applicant.socialMediaResorse).map(([key, value]) => (\n//                                     <li className={Style.fntSize} key={key}>{key}: {value}</li>\n//                                 ))}\n//                             </ul>\n//                         </div>\n//                         :\n//                         ''\n//                     }\n//                 </table>\n//             )}\n//         </div>\n//     )\n\n// }\n\n// // \"applicants\": [\n// //                     {\n// //                         \"name\": \"Abi\",\n// //                         \"email\": \"jith@jk.com\",\n// //                         \"socialMediaResorse\": {\n// //                             \"linkedIn\": \"linkedIn.com/jith\",\n// //                             \"github\": \"github.com/jith\"\n// //                         },\n// //                         \"mobileNumber\": 1234567890,\n// //                         \"result\": \"Onhold\",\n// //                         \"points\": 80\n// //                     }\n// //                 ]","map":{"version":3,"names":[],"sources":["/home/abi-zstk360/Downloads/RecruitmentProject/Project/myproject/src/Components/TodayOpenings/TodayOpening.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import data from './Openings.json';\n// import { Text } from \"../Text/Text\";\n// import Style from '../TodayOpenings/TodayOpenings.module.css';\n// import { Image } from \"../ImageTag/Image\";\n// import { Heading } from \"../Heading/Heading\";\n\n// export const TodayOpenings = () => {\n\n//     const [openingsJson, setOpeningsJson] = useState([]);\n//     const [selectOpening, setSelectOpening] = useState(-1);\n//     const [profile, setProfile] = useState(false);\n//     const [applicant, setApplicant] = useState([]);\n//     const [selectOption, setSelectOption] = useState(null);\n\n//     const currentDate = new Date();\n//     const currYear = currentDate.getFullYear();\n//     const currMonth = currentDate.getMonth() < 10 ? '0' + (currentDate.getMonth() + 1) : (currentDate.getMonth() + 1);\n//     const currDate = currentDate.getDate() < 10 ? '0' + (currentDate.getDate()) : currentDate.getDate();\n//     const formatDate = `${currYear}-${currMonth}-${currDate}`;\n\n//     const viewProfile = (applicant) => {\n//         setProfile(true);\n//         setApplicant(applicant);\n//     }\n\n//     const handleChange = (event) => {\n//         setSelectOpening(event.target.value);\n//         // console.log(selectOpening);\n//     }\n\n//     const selectResult = (event) => {\n//         setSelectOption(event.target.value);\n//     }\n\n//     useEffect(() => {\n//         const defaultValue = openingsJson.findIndex(element => (\n//             // element.test.some(test => test.Date === formatDate)\n//             element.test.map((sampleTest, ind) => (\n//                 sampleTest.testDate === formatDate\n//             )\n//         )\n//         ))\n//         console.log(\"default: \" , defaultValue);\n//         console.log(selectOpening);\n//         setSelectOpening(defaultValue)\n//         console.log(\"select \" , selectOpening >= 0);\n//         // if(defaultValue >= 0){\n//         //     console.log(\"applicants: \" , openingsJson[defaultValue].applicants[0].map((applicant, idx) => (console.log(applicant.jobSeekerName))));\n\n//         // }\n//         // console.log(\"applicants: \" , openingsJson[defaultValue].applicants);\n\n//     //     opening.test.map((sampleTest, ind) => (\n//     //         sampleTest.testDate === formatDate\n//     // )\n\n        \n//     }, [formatDate, openingsJson, selectOpening])\n\n//     const fetchData = () => {\n//             fetch('http://localhost:8080/JobVista/PanelistOpeningServlet', {\n//                 method: 'GET',\n//                 headers: {\n//                     'Content-type': 'application/json'\n//                 }\n//             })\n//                 .then((response) => {\n//                     if (!response.ok) {\n//                         throw new Error(`HTTP error status: ${response.status}`)\n//                     }\n//                     return response.json();\n//                 })\n//                 .then((result) => {\n//                     console.log(result.Value.upComingOpenings[0].test[0].applicants[0]);\n//                     console.log(\"upcoming: \" , result.Value.upComingOpenings[0].test);\n//                     setOpeningsJson(result.Value.upComingOpenings);\n\n//                     result.Value.upComingOpenings[0].test.map((sampleTest, ind) => {\n                       \n//                             sampleTest.applicants[0].map((sample, idx) => {\n//                                 console.log(\"name: \", sample.Name);\n//                             });\n                        \n//                     });\n//                 })\n//                 .catch((error) => {\n//                     console.log(\"Error in get openings \", error);\n//                 })\n//         }\n\n//         useEffect(() => {\n//             fetchData();\n//         }, [])\n\n//         useEffect (() => {\n//             console.log(\"selectOpening: \" , selectOpening);\n            \n\n//             if(selectOpening >= 0){\n                \n//                 // openingsJson[selectOpening].test.map((sampleTest, ind) => {\n//                 //     sampleTest.applicants[0].map((sample, idx) => {\n//                 //         console.log(sample.Name);\n//                 //     });\n//                 //     console.log(\"applicants:\");\n//                 // });\n//             }\n//         }, [selectOpening, openingsJson])\n\n//     return (\n//         <div>\n            \n//             <select id={Style.select} onChange={handleChange}>\n//                 {openingsJson.map((opening, index) => (\n//                     opening.test.map((sampleTest, ind) => (\n//                         sampleTest.testDate === formatDate && (\n//                             <option key={ind} value={ind}>{sampleTest.testTitle}</option>\n                            \n//                         )\n//                     ))\n//                 ))}\n\n\n\n\n//             </select>\n\n//             <div id={Style.level}>\n//                 <i class=\"fa-solid fa-chevron-left\"></i>\n\n//                 <Text>Level 1</Text>\n\n//                 {/* {openingsJson.map((element, index) => (\n//                     <Text>Level{element.test[index].roundOn}</Text>\n//                 ))} */}\n\n//                 <i class=\"fa-solid fa-chevron-right\"></i>\n//             </div>\n\n//             {selectOpening !== null && (\n//                 <table>\n\n//                     <tr>\n//                         <th>Name</th>\n//                         <th>Email</th>\n//                         <th>Mobile Number</th>\n//                         <th>Points</th>\n//                         <th>Result</th>\n//                         <th></th>\n//                     </tr>\n//                     <h1>SelectOpening {selectOpening}</h1>\n//                     {selectOpening >= 0 && openingsJson[selectOpening].test > 0 && openingsJson[selectOpening].test.map((sampleTest, ind) => (\n//                         sampleTest.applicants[0].length > 0 && sampleTest.applicants[0].map((sample, idx) => {\n//                             <div>\n                                \n//                            <tr key={idx} className={Style.hover}>\n//                                 <td>{sample[0].Name}</td>\n//                                 <td>{sample.Email}</td>\n//                                 <td>{sample.Phone}</td>\n//                                 <td>{sample.Points}</td>\n//                                 <td>\n//                                     {!selectOption && (\n//                                         <select onChange={selectResult}>\n//                                             <option>Select</option>\n//                                             <option>Onhold</option>\n//                                             <option>Reject</option>\n//                                         </select>\n//                                     )}\n//                                     {console.log(selectOption)}\n//                                     {selectOption && (\n//                                         <p onClick={() => setSelectOption(false)} id={Style.selectOption}>{selectOption}</p>\n//                                     )}\n//                                 </td>\n//                                 <td className={Style.icon}><i onClick={() => viewProfile(applicant)} id={Style.icon} class=\"fa-solid fa-circle-info\"></i></td>\n\n//                             </tr>\n//                             </div>\n//             })))}\n\n//                     {profile ?\n//                         <div id={Style.viewProfile}>\n//                             <i class=\"fa-solid fa-circle-xmark\" onClick={() => setProfile(false)} id={Style.crossBtn}></i>\n\n//                             <Image id={Style.img} src='../../Images/user.png' />\n\n//                             <Heading id={Style.name}>{applicant.name} - <Text id={Style.email}>{applicant.email}</Text></Heading>\n\n//                             <Text className={Style.fntSize}>Contact - {applicant.mobileNumber}</Text>\n\n//                             <ul>\n//                                 <li className={Style.fontSize}>Social Media Resources: </li>\n//                                 {Object.entries(applicant.socialMediaResorse).map(([key, value]) => (\n//                                     <li className={Style.fntSize} key={key}>{key}: {value}</li>\n//                                 ))}\n//                             </ul>\n//                         </div>\n//                         :\n//                         ''\n//                     }\n//                 </table>\n//             )}\n//         </div>\n//     )\n\n// }\n\n// // \"applicants\": [\n// //                     {\n// //                         \"name\": \"Abi\",\n// //                         \"email\": \"jith@jk.com\",\n// //                         \"socialMediaResorse\": {\n// //                             \"linkedIn\": \"linkedIn.com/jith\",\n// //                             \"github\": \"github.com/jith\"\n// //                         },\n// //                         \"mobileNumber\": 1234567890,\n// //                         \"result\": \"Onhold\",\n// //                         \"points\": 80\n// //                     }\n// //                 ]\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAKA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
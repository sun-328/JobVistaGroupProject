{"ast":null,"code":"var _jsxFileName = \"/home/abi-zstk360/Downloads/RecruitmentProject/Project/myproject/src/Components/BarChart/Chart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Chart from \"chart.js/auto\";\nimport { Doughnut } from \"react-chartjs-2\";\nimport Style from '../BarChart/Bar.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LineChart = () => {\n  _s();\n  const [label, setLabel] = useState([]);\n  const [datavalue, setdatavalue] = useState([]);\n  const fetchData = () => {\n    fetch(\"http://localhost:8080/JobVista/Graphs\", {\n      method: 'GET',\n      headers: {\n        'Content-type': 'Application/JSON'\n      }\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      return response.json();\n    }).then(result => {\n      // const selectedApplicantsGraphInDepartments = result.selectedApplicantsGraphInDepartments;\n      // console.log(selectedApplicantsGraphInDepartments);\n      // console.log(Object.keys(selectedApplicantsGraphInDepartments).length);\n      const applicantsStatusGraph = result.applicantsStatusGraph;\n      console.log(applicantsStatusGraph);\n      console.log(Object.keys(applicantsStatusGraph).length);\n      if (Object.keys(applicantsStatusGraph).length > 0) {\n        // const getkeys = Object.entries(applicantsStatusGraph).map(([key, _]) => Object.keys(key));\n        // const getvalues = Object.entries(applicantsStatusGraph).map(([_, value]) => value);\n        const entries = Object.entries(applicantsStatusGraph);\n        if (entries.length === 1) {\n          setLabel(entries.map(([key, _]) => key));\n          setdatavalue(entries.map(([_, value]) => value));\n        } else {\n          const mergedEntry = entries.reduce((acc, [key, value]) => ({\n            ...acc,\n            [key]: value\n          }), {});\n          setLabel(Object.keys(mergedEntry));\n          setdatavalue(Object.values(mergedEntry));\n        }\n        console.log(\"label1:\", label);\n        console.log(\"datas1:\", datavalue);\n      }\n    }).catch(error => {\n      console.error('Error fetching data:', error);\n    });\n  };\n  useEffect(() => {\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: Style.chartId,\n    children: /*#__PURE__*/_jsxDEV(Doughnut, {\n      data: {\n        labels: label,\n        datasets: [{\n          label: \"Total Hire\",\n          data: datavalue,\n          backgroundColor: [\"rgba(255, 99, 132, 0.2)\", \"rgba(54, 162, 235, 0.2)\", \"rgba(255, 206, 86, 0.2)\", \"rgba(75, 192, 192, 0.2)\", \"rgba(153, 102, 255, 0.2)\", \"rgba(255, 159, 64, 0.2)\"],\n          borderColor: [\"rgba(255, 99, 132, 1)\", \"rgba(54, 162, 235, 1)\", \"rgba(255, 206, 86, 1)\", \"rgba(75, 192, 192, 1)\", \"rgba(153, 102, 255, 1)\", \"rgba(255, 159, 64, 1)\"],\n          borderWidth: 1\n        }]\n      },\n      options: {\n        circumference: 180,\n        rotation: 270\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n_s(LineChart, \"IVnKMsILtEoPOWeGItkL5i9n6N0=\");\n_c = LineChart;\nexport default LineChart;\n\n// import React, { useState, useEffect } from 'react';\nvar _c;\n$RefreshReg$(_c, \"LineChart\");","map":{"version":3,"names":["React","useState","useEffect","Chart","Doughnut","Style","jsxDEV","_jsxDEV","LineChart","_s","label","setLabel","datavalue","setdatavalue","fetchData","fetch","method","headers","then","response","ok","Error","status","json","result","applicantsStatusGraph","console","log","Object","keys","length","entries","map","key","_","value","mergedEntry","reduce","acc","values","catch","error","id","chartId","children","data","labels","datasets","backgroundColor","borderColor","borderWidth","options","circumference","rotation","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/abi-zstk360/Downloads/RecruitmentProject/Project/myproject/src/Components/BarChart/Chart.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Chart from \"chart.js/auto\";\nimport { Doughnut } from \"react-chartjs-2\";\nimport Style from '../BarChart/Bar.module.css';\n\n\n\nconst LineChart = () => {\n    const [label, setLabel] = useState([]);\n    const [datavalue, setdatavalue] = useState([]);\n  \n    const fetchData = () => {\n        fetch(\"http://localhost:8080/JobVista/Graphs\", {\n            method: 'GET',\n            headers: {\n                'Content-type': 'Application/JSON'\n            }\n        })\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error(`HTTP error! Status: ${response.status}`);\n                }\n                return response.json();\n            })\n            .then(result => {\n                // const selectedApplicantsGraphInDepartments = result.selectedApplicantsGraphInDepartments;\n                // console.log(selectedApplicantsGraphInDepartments);\n                // console.log(Object.keys(selectedApplicantsGraphInDepartments).length);\n                const applicantsStatusGraph = result.applicantsStatusGraph;\n                console.log(applicantsStatusGraph);\n                console.log(Object.keys(applicantsStatusGraph).length);\n\n                if ((Object.keys(applicantsStatusGraph)).length > 0) {\n                    // const getkeys = Object.entries(applicantsStatusGraph).map(([key, _]) => Object.keys(key));\n                    // const getvalues = Object.entries(applicantsStatusGraph).map(([_, value]) => value);\n                    const entries = Object.entries(applicantsStatusGraph);\n                    if (entries.length === 1) {\n                        setLabel(entries.map(([key, _]) => key));\n                        setdatavalue(entries.map(([_, value]) => value));\n                    } else {\n                        const mergedEntry = entries.reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\n                        setLabel(Object.keys(mergedEntry));\n                        setdatavalue(Object.values(mergedEntry));\n                    }\n\n                    console.log(\"label1:\", label);\n                    console.log(\"datas1:\", datavalue);\n                }\n\n            })\n            .catch(error => {\n                console.error('Error fetching data:', error);\n            });\n    }\n\n    useEffect(() => {\n        fetchData();\n    }, []);\n\n\n    return (\n        <div id={Style.chartId} >\n            <Doughnut data={{\n                    labels: label,\n                    datasets: [{\n                        label: \"Total Hire\",\n                        data: datavalue,\n                        backgroundColor: [\n                            \"rgba(255, 99, 132, 0.2)\",\n                            \"rgba(54, 162, 235, 0.2)\",\n                            \"rgba(255, 206, 86, 0.2)\",\n                            \"rgba(75, 192, 192, 0.2)\",\n                            \"rgba(153, 102, 255, 0.2)\",\n                            \"rgba(255, 159, 64, 0.2)\"\n                        ],\n                        borderColor: [\n                            \"rgba(255, 99, 132, 1)\",\n                            \"rgba(54, 162, 235, 1)\",\n                            \"rgba(255, 206, 86, 1)\",\n                            \"rgba(75, 192, 192, 1)\",\n                            \"rgba(153, 102, 255, 1)\",\n                            \"rgba(255, 159, 64, 1)\"\n                        ],\n                        borderWidth: 1\n                    }]\n                }}\n                options={{\n                    circumference: 180,\n                    rotation: 270\n                }}\n/>\n        </div>\n    );\n};\n\nexport default LineChart;\n\n// import React, { useState, useEffect } from 'react';\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
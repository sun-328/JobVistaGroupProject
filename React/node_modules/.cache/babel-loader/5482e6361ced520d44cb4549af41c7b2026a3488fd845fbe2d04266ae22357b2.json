{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import Chart from \"chart.js/auto\";\n// import { Doughnut } from \"react-chartjs-2\";\n// import Style from '../BarChart/Bar.module.css';\n\n// const LineChart = () => {\n//     const [label, setLabel] = useState([]);\n//     const [datavalue, setdatavalue] = useState([]);\n\n//     const result = {\"selectedApplicantsGraphInOpenings\":{\"Software develeoper\":22},\"getApplicantsStatusGraph\":{\"Onhold\":38,\"Selected\":22,\"Rejected\":9},\"selectedApplicantsGraphInYear\":{\"2022\":22},\"statusCode\":200};\n\n//     const applicantsStatusGraph = result.getApplicantsStatusGraph;\n\n//     if ((Object.keys(applicantsStatusGraph)).length > 0) {\n//         const entries = Object.entries(applicantsStatusGraph);\n//         if (entries.length === 1) {\n//             setLabel(entries.map(([key, _]) => key));\n//             setdatavalue(entries.map(([_, value]) => value));\n//         } else {\n//             const mergedEntry = entries.reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\n//             setLabel(Object.keys(mergedEntry));\n//             setdatavalue(Object.values(mergedEntry));\n//         }\n\n//     }\n\n//     // const fetchData = () => {\n//     //     fetch(\"http://localhost:8080/JobVista/Graph\", {\n//     //         method: 'POST',\n//     //         headers: {\n//     //             'Content-type': 'Application/JSON'\n//     //         },\n//     //         body: JSON.stringify({ 'userDetails': JSON.parse(localStorage.getItem('userDetails')) })\n//     //     })\n//     //         .then(response => {\n//     //             if (!response.ok) {\n//     //                 throw new Error(`HTTP error! Status: ${response.status}`);\n//     //             }\n//     //             return response.json();\n//     //         })\n//     //         .then(result => {\n//     //             console.log(\"chart: \", result);\n//     //             const applicantsStatusGraph = result.getApplicantsStatusGraph;\n\n//     //             if ((Object.keys(applicantsStatusGraph)).length > 0) {\n//     //                 const entries = Object.entries(applicantsStatusGraph);\n//     //                 if (entries.length === 1) {\n//     //                     setLabel(entries.map(([key, _]) => key));\n//     //                     setdatavalue(entries.map(([_, value]) => value));\n//     //                 } else {\n//     //                     const mergedEntry = entries.reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\n//     //                     setLabel(Object.keys(mergedEntry));\n//     //                     setdatavalue(Object.values(mergedEntry));\n//     //                 }\n\n//     //             }\n\n//     //         })\n//     //         .catch(error => {\n//     //             console.error('Error fetching data:', error);\n//     //         });\n//     // }\n\n//     // useEffect(() => {\n//     //     fetchData();\n//     // }, []);\n\n//     return (\n//         <div id={Style.chartId} className={Style.chart}>\n//             {label.length > 0 ? (\n//                 <Doughnut\n//                     data={{\n//                         labels: label,\n//                         datasets: [{\n//                             label: \"\",\n//                             data: datavalue,\n//                             backgroundColor: [\n//                                 \"rgba(255, 99, 132, 0.2)\",\n//                                 \"rgba(54, 162, 235, 0.2)\",\n//                                 \"rgba(255, 206, 86, 0.2)\",\n//                                 \"rgba(75, 192, 192, 0.2)\",\n//                                 \"rgba(153, 102, 255, 0.2)\",\n//                                 \"rgba(255, 159, 64, 0.2)\"\n//                             ],\n//                             borderColor: [\n//                                 \"rgba(255, 99, 132, 1)\",\n//                                 \"rgba(54, 162, 235, 1)\",\n//                                 \"rgba(255, 206, 86, 1)\",\n//                                 \"rgba(75, 192, 192, 1)\",\n//                                 \"rgba(153, 102, 255, 1)\",\n//                                 \"rgba(255, 159, 64, 1)\"\n//                             ],\n//                             borderWidth: 1\n//                         }]\n//                     }}\n//                     options={{\n//                         circumference: 180,\n//                         rotation: 270\n//                     }}\n//                 />\n//             ) : (\n//                 <p>No data available</p>\n//             )}\n//         </div>\n//     );\n\n// };\n\n// export default LineChart;","map":{"version":3,"names":[],"sources":["/home/abi-zstk360/Downloads/RecruitmentProject/Project/myproject/src/Components/PanelistPage/ApplicantsChart.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import Chart from \"chart.js/auto\";\n// import { Doughnut } from \"react-chartjs-2\";\n// import Style from '../BarChart/Bar.module.css';\n\n\n\n// const LineChart = () => {\n//     const [label, setLabel] = useState([]);\n//     const [datavalue, setdatavalue] = useState([]);\n\n//     const result = {\"selectedApplicantsGraphInOpenings\":{\"Software develeoper\":22},\"getApplicantsStatusGraph\":{\"Onhold\":38,\"Selected\":22,\"Rejected\":9},\"selectedApplicantsGraphInYear\":{\"2022\":22},\"statusCode\":200};\n\n//     const applicantsStatusGraph = result.getApplicantsStatusGraph;\n\n//     if ((Object.keys(applicantsStatusGraph)).length > 0) {\n//         const entries = Object.entries(applicantsStatusGraph);\n//         if (entries.length === 1) {\n//             setLabel(entries.map(([key, _]) => key));\n//             setdatavalue(entries.map(([_, value]) => value));\n//         } else {\n//             const mergedEntry = entries.reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\n//             setLabel(Object.keys(mergedEntry));\n//             setdatavalue(Object.values(mergedEntry));\n//         }\n\n\n//     }\n\n//     // const fetchData = () => {\n//     //     fetch(\"http://localhost:8080/JobVista/Graph\", {\n//     //         method: 'POST',\n//     //         headers: {\n//     //             'Content-type': 'Application/JSON'\n//     //         },\n//     //         body: JSON.stringify({ 'userDetails': JSON.parse(localStorage.getItem('userDetails')) })\n//     //     })\n//     //         .then(response => {\n//     //             if (!response.ok) {\n//     //                 throw new Error(`HTTP error! Status: ${response.status}`);\n//     //             }\n//     //             return response.json();\n//     //         })\n//     //         .then(result => {\n//     //             console.log(\"chart: \", result);\n//     //             const applicantsStatusGraph = result.getApplicantsStatusGraph;\n\n//     //             if ((Object.keys(applicantsStatusGraph)).length > 0) {\n//     //                 const entries = Object.entries(applicantsStatusGraph);\n//     //                 if (entries.length === 1) {\n//     //                     setLabel(entries.map(([key, _]) => key));\n//     //                     setdatavalue(entries.map(([_, value]) => value));\n//     //                 } else {\n//     //                     const mergedEntry = entries.reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\n//     //                     setLabel(Object.keys(mergedEntry));\n//     //                     setdatavalue(Object.values(mergedEntry));\n//     //                 }\n\n\n//     //             }\n\n//     //         })\n//     //         .catch(error => {\n//     //             console.error('Error fetching data:', error);\n//     //         });\n//     // }\n\n//     // useEffect(() => {\n//     //     fetchData();\n//     // }, []);\n\n\n//     return (\n//         <div id={Style.chartId} className={Style.chart}>\n//             {label.length > 0 ? (\n//                 <Doughnut\n//                     data={{\n//                         labels: label,\n//                         datasets: [{\n//                             label: \"\",\n//                             data: datavalue,\n//                             backgroundColor: [\n//                                 \"rgba(255, 99, 132, 0.2)\",\n//                                 \"rgba(54, 162, 235, 0.2)\",\n//                                 \"rgba(255, 206, 86, 0.2)\",\n//                                 \"rgba(75, 192, 192, 0.2)\",\n//                                 \"rgba(153, 102, 255, 0.2)\",\n//                                 \"rgba(255, 159, 64, 0.2)\"\n//                             ],\n//                             borderColor: [\n//                                 \"rgba(255, 99, 132, 1)\",\n//                                 \"rgba(54, 162, 235, 1)\",\n//                                 \"rgba(255, 206, 86, 1)\",\n//                                 \"rgba(75, 192, 192, 1)\",\n//                                 \"rgba(153, 102, 255, 1)\",\n//                                 \"rgba(255, 159, 64, 1)\"\n//                             ],\n//                             borderWidth: 1\n//                         }]\n//                     }}\n//                     options={{\n//                         circumference: 180,\n//                         rotation: 270\n//                     }}\n//                 />\n//             ) : (\n//                 <p>No data available</p>\n//             )}\n//         </div>\n//     );\n\n// };\n\n// export default LineChart;"],"mappings":"AAAA;AACA;AACA;AACA;;AAIA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/home/abi-zstk360/Downloads/RecruitmentProject/Project/myproject/src/Components/BarChart/Chart.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import Chart from \"chart.js/auto\";\n// import { Pie } from \"react-chartjs-2\";\n\n// // box-sizing: border-box;\n// // display: block;\n// // height: 318px;\n// // width: 754px;\n\n// const LineChart = () => {\n//     const [label, setLabel] = useState([]);\n//     const [dataSeting, setdata] = useState([]);\n\n//     const fetchData = () => {\n//         fetch(\"http://localhost:8080/JobVista/Graphs\", {\n//             method: 'GET',\n//             headers: {\n//                 'Content-type': 'Application/JSON'\n//             }\n//         })\n//             .then(response => {\n//                 if (!response.ok) {\n//                     throw new Error(`HTTP error! Status: ${response.status}`);\n//                 }\n//                 return response.json();\n//             })\n//             .then(result => {\n//                 const selectedApplicantsGraphInDepartments = result.selectedApplicantsGraphInDepartments;\n//                 console.log(selectedApplicantsGraphInDepartments);\n//                 console.log(Object.keys(selectedApplicantsGraphInDepartments).length);\n\n//                 if ((Object.keys(selectedApplicantsGraphInDepartments)).length > 0) {\n//                     const getkeys = Object.entries(selectedApplicantsGraphInDepartments).map(([key, _]) => key);\n//                     const getvalues = Object.entries(selectedApplicantsGraphInDepartments).map(([_, value]) => value);\n//                     setLabel(getkeys);\n//                     setdata(getvalues);\n//                     console.log(\"label1:\", label);\n//                     console.log(\"datas1:\", dataSeting);\n//                 }\n\n//             })\n//             .catch(error => {\n//                 console.error('Error fetching data:', error);\n//             });\n//     }\n\n//     useEffect(() => {\n//         fetchData();\n//     }, []);\n\n//     useEffect(() => {\n//         console.log(\"label:\", label);\n//         console.log(\"dataSeting:\", dataSeting);\n//     }, [label, dataSeting]);\n\n//     return (\n//         <div>\n//             <Pie data={{ labels: label, datasets: [{ label: \"Total Hire\", backgroundColor: \"rgb(255, 99, 132)\", borderColor: \"rgb(255, 240, 132)\", data: dataSeting }] }} />\n//         </div>\n//     );\n// };\n\n// export default LineChart;\n\nimport React, { useState, useEffect } from 'react';\nimport { Doughnut } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst data = {\n  labels: ['IT', 'Finance', 'Engineering'],\n  datasets: [{\n    data: [1, 2, 5],\n    backgroundColor: ['rgb(255, 99, 132)', 'rgb(54, 162, 235)', 'rgb(255, 205, 86)'],\n    borderColor: ['rgb(255, 99, 132)', 'rgb(54, 162, 235)', 'rgb(255, 205, 86)'],\n    borderWidth: 1\n  }]\n};\nconst HalfCirclePieChart = ({\n  data\n}) => {\n  _s();\n  const [chartData, setChartData] = useState(data);\n  useEffect(() => {\n    setChartData(data);\n  }, [data]);\n  const halfCircleOptions = {\n    maintainAspectRatio: false,\n    rotation: 1 * Math.PI,\n    circumference: 1 * Math.PI\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Doughnut, {\n      data: chartData,\n      options: halfCircleOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }, this);\n};\n_s(HalfCirclePieChart, \"9nS9odSMPd2IBO/e+DvBFkkanxU=\");\n_c = HalfCirclePieChart;\nexport default HalfCirclePieChart;\nvar _c;\n$RefreshReg$(_c, \"HalfCirclePieChart\");","map":{"version":3,"names":["React","useState","useEffect","Doughnut","jsxDEV","_jsxDEV","data","labels","datasets","backgroundColor","borderColor","borderWidth","HalfCirclePieChart","_s","chartData","setChartData","halfCircleOptions","maintainAspectRatio","rotation","Math","PI","circumference","children","options","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/abi-zstk360/Downloads/RecruitmentProject/Project/myproject/src/Components/BarChart/Chart.js"],"sourcesContent":["\n\n// import React, { useState, useEffect } from \"react\";\n// import Chart from \"chart.js/auto\";\n// import { Pie } from \"react-chartjs-2\";\n\n\n\n// // box-sizing: border-box;\n// // display: block;\n// // height: 318px;\n// // width: 754px;\n\n\n// const LineChart = () => {\n//     const [label, setLabel] = useState([]);\n//     const [dataSeting, setdata] = useState([]);\n\n//     const fetchData = () => {\n//         fetch(\"http://localhost:8080/JobVista/Graphs\", {\n//             method: 'GET',\n//             headers: {\n//                 'Content-type': 'Application/JSON'\n//             }\n//         })\n//             .then(response => {\n//                 if (!response.ok) {\n//                     throw new Error(`HTTP error! Status: ${response.status}`);\n//                 }\n//                 return response.json();\n//             })\n//             .then(result => {\n//                 const selectedApplicantsGraphInDepartments = result.selectedApplicantsGraphInDepartments;\n//                 console.log(selectedApplicantsGraphInDepartments);\n//                 console.log(Object.keys(selectedApplicantsGraphInDepartments).length);\n                \n\n//                 if ((Object.keys(selectedApplicantsGraphInDepartments)).length > 0) {\n//                     const getkeys = Object.entries(selectedApplicantsGraphInDepartments).map(([key, _]) => key);\n//                     const getvalues = Object.entries(selectedApplicantsGraphInDepartments).map(([_, value]) => value);\n//                     setLabel(getkeys);\n//                     setdata(getvalues);\n//                     console.log(\"label1:\", label);\n//                     console.log(\"datas1:\", dataSeting);\n//                 }\n\n//             })\n//             .catch(error => {\n//                 console.error('Error fetching data:', error);\n//             });\n//     }\n\n//     useEffect(() => {\n//         fetchData();\n//     }, []);\n\n//     useEffect(() => {\n//         console.log(\"label:\", label);\n//         console.log(\"dataSeting:\", dataSeting);\n//     }, [label, dataSeting]);\n\n//     return (\n//         <div>\n//             <Pie data={{ labels: label, datasets: [{ label: \"Total Hire\", backgroundColor: \"rgb(255, 99, 132)\", borderColor: \"rgb(255, 240, 132)\", data: dataSeting }] }} />\n//         </div>\n//     );\n// };\n\n// export default LineChart;\n\nimport React, { useState, useEffect } from 'react';\nimport { Doughnut } from 'react-chartjs-2';\n\nconst data = {\n    labels: ['IT', 'Finance', 'Engineering'],\n    datasets: [{\n        data: [1, 2, 5],\n        backgroundColor: ['rgb(255, 99, 132)', 'rgb(54, 162, 235)', 'rgb(255, 205, 86)'],\n        borderColor: ['rgb(255, 99, 132)', 'rgb(54, 162, 235)', 'rgb(255, 205, 86)'],\n        borderWidth: 1,\n    }],\n};\n\nconst HalfCirclePieChart = ({ data }) => {\n    const [chartData, setChartData] = useState(data);\n   \n    useEffect(() => {\n        setChartData(data);\n    }, [data]);\n\n    const halfCircleOptions = {\n        maintainAspectRatio: false,\n        rotation: 1 * Math.PI,\n        circumference: 1 * Math.PI,\n    };\n\n    return (\n        <div>\n            <Doughnut data={chartData} options={halfCircleOptions} />\n        </div>\n    );\n};\n\nexport default HalfCirclePieChart;\n"],"mappings":";;AAEA;AACA;AACA;;AAIA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,QAAQ,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,MAAMC,IAAI,GAAG;EACTC,MAAM,EAAE,CAAC,IAAI,EAAE,SAAS,EAAE,aAAa,CAAC;EACxCC,QAAQ,EAAE,CAAC;IACPF,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACfG,eAAe,EAAE,CAAC,mBAAmB,EAAE,mBAAmB,EAAE,mBAAmB,CAAC;IAChFC,WAAW,EAAE,CAAC,mBAAmB,EAAE,mBAAmB,EAAE,mBAAmB,CAAC;IAC5EC,WAAW,EAAE;EACjB,CAAC;AACL,CAAC;AAED,MAAMC,kBAAkB,GAAGA,CAAC;EAAEN;AAAK,CAAC,KAAK;EAAAO,EAAA;EACrC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAACK,IAAI,CAAC;EAEhDJ,SAAS,CAAC,MAAM;IACZa,YAAY,CAACT,IAAI,CAAC;EACtB,CAAC,EAAE,CAACA,IAAI,CAAC,CAAC;EAEV,MAAMU,iBAAiB,GAAG;IACtBC,mBAAmB,EAAE,KAAK;IAC1BC,QAAQ,EAAE,CAAC,GAAGC,IAAI,CAACC,EAAE;IACrBC,aAAa,EAAE,CAAC,GAAGF,IAAI,CAACC;EAC5B,CAAC;EAED,oBACIf,OAAA;IAAAiB,QAAA,eACIjB,OAAA,CAACF,QAAQ;MAACG,IAAI,EAAEQ,SAAU;MAACS,OAAO,EAAEP;IAAkB;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxD,CAAC;AAEd,CAAC;AAACd,EAAA,CAlBID,kBAAkB;AAAAgB,EAAA,GAAlBhB,kBAAkB;AAoBxB,eAAeA,kBAAkB;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
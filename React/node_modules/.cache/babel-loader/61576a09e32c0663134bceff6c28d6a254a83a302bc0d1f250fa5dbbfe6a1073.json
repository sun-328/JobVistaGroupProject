{"ast":null,"code":"// import React, { useEffect, useState } from 'react';\n// import Style from '../Openings/Openings.module.css';\n// import { Heading } from '../Heading/Heading';\n// import { Button } from '../Button/Button';\n\n// export const Openings = () => {\n//   const [openingsJson, setOpeningsJson] = useState([]);\n//   const [openingIndex, setSelectedOpeningIndex] = useState(null);\n//   const [view, setView] = useState(false);\n\n//   const viewDetails = (openingIndex) => {\n//     setView(true);\n//     setSelectedOpeningIndex(openingIndex);\n//   }\n\n//   const backBtn = () => {\n//     setView(false);\n//   }\n\n//   useEffect(() => {\n//     fetchCallForOpenings();\n//   }, []);\n\n//   const fetchCallForOpenings = () => {\n//     fetch(\"http://localhost:8080/JobVista/GetOpenings\", {\n//       method: 'GET',\n//       headers: {\n//         'Content-type': 'Application/JSON'\n//       }\n//     })\n//       .then(response => {\n//         if (!response.ok) {\n//           throw new Error(`HTTP error! Status: ${response.status}`);\n//         }\n//         return response.json();\n//       })\n//       .then(result => {\n//         console.log(\"Fetched data:\", result);\n//         console.log(\"Departments:\", result.Value);\n//         setOpeningsJson(result.Value);\n//       })\n//       .catch(error => {\n//         console.error('Error fetching data:', error);\n//       });\n//   }\n\n//   useEffect(() => {\n//     console.log(\"json: \" + openingsJson);\n//   }, []);\n\n//   return (\n//     <div>\n\n//       {!view && openingsJson && (\n//   <div id={Style.applicants}>\n//     <Heading>Openings</Heading>\n\n//     <table>\n//       <thead>\n//         <tr className={Style.openingTr}>\n//           <th>Opening Name</th>\n//           <th>Qualification</th>\n//           <th>Experience</th>\n//           <th>Employment Type</th>\n//           <th>Salary Range</th>\n//           <th>Start_Date</th>\n//           <th>End_Date</th>\n//           <th>Department Name</th>\n//         </tr>\n//       </thead>\n//       <tbody>\n//         {openingsJson.map((item, index) => (\n//           <tr key={index} onClick={() => viewDetails(index)}>\n//             <td>{item.Opening.description}</td>\n//             <td>{item.Opening.qualification}</td>\n//             <td>{item.Opening.experience}</td>\n//             <td>{item.Opening.employmentType}</td>\n//             <td>{item.Opening.salaryRange}</td>\n//             <td>{item.Opening.startDate}</td>\n//             <td>{item.Opening.endDate}</td>\n//             <td>{item.Opening.departments}</td>\n//           </tr>\n//         ))}\n//       </tbody>\n//     </table>\n//   </div>\n// )} {view && openingIndex !== null && (\n//   <div>\n//     <div id={Style.applicantDiv}>\n//       <Heading className={Style.title}><i onClick={backBtn} class=\"fa-regular fa-circle-left\"></i>Tests</Heading>\n//       {/* <Button onClick={backBtn}>Back</Button> */}\n//     </div>\n//     <table>\n//       <thead>\n//         <tr className={Style.openingTr}>\n//           <th>Test Title</th>\n//           <th>Date</th>\n//           <th>Duration</th>\n//         </tr>\n//       </thead>\n//       <tbody>\n//       {openingsJson[openingIndex].Test && Object.keys(openingsJson[openingIndex].Test).length > 0 ? (\n//           <tr>\n//             <td>{openingsJson[openingIndex].Test.testTitle}</td>\n//             <td>{openingsJson[openingIndex].Test.testDate}</td>\n//             <td>{openingsJson[openingIndex].Test.testDuration}</td>\n//           </tr>\n//         ) : (\n//           <tr>\n//             <td colSpan=\"3\">No tests available</td>\n//           </tr>\n//         )}\n//       </tbody>\n//     </table>\n//   </div>\n\n// )}\n\n// {view && openingIndex !== null && (\n//   <div>\n//     <div id={Style.applicantDiv}>\n//       <Heading className={Style.title}><i onClick={backBtn} className=\"fa-regular fa-circle-left\"></i>Panelists</Heading>\n//       {/* <Button onClick={backBtn}>Back</Button> */}\n//     </div>\n//     <table>\n//       <thead>\n//         <tr className={Style.openingTr}>\n//           <th>Name</th>\n//           <th>Email</th>\n//           <th>Position</th>\n//           <th>Gender</th>\n//         </tr>\n//       </thead>\n//       <tbody>\n//         <tr>\n//           <td>{openingsJson[openingIndex].Panelist.panelistName}</td>\n//           <td>{openingsJson[openingIndex].Panelist.panelistEmail}</td>\n//           <td>{openingsJson[openingIndex].Panelist.panelistPosition}</td>\n//           <td>{openingsJson[openingIndex].Panelist.panelistGender}</td>\n//         </tr>\n//       </tbody>\n//     </table>\n//   </div>\n// )}\n\n//       </div>\n//   )\n// }","map":{"version":3,"names":[],"sources":["/home/abi-zstk360/Downloads/RecruitmentProject/Project/myproject/src/Components/Openings/Openings.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\n// import Style from '../Openings/Openings.module.css';\n// import { Heading } from '../Heading/Heading';\n// import { Button } from '../Button/Button';\n\n// export const Openings = () => {\n//   const [openingsJson, setOpeningsJson] = useState([]);\n//   const [openingIndex, setSelectedOpeningIndex] = useState(null);\n//   const [view, setView] = useState(false);\n\n//   const viewDetails = (openingIndex) => {\n//     setView(true);\n//     setSelectedOpeningIndex(openingIndex);\n//   }\n\n//   const backBtn = () => {\n//     setView(false);\n//   }\n\n//   useEffect(() => {\n//     fetchCallForOpenings();\n//   }, []);\n\n//   const fetchCallForOpenings = () => {\n//     fetch(\"http://localhost:8080/JobVista/GetOpenings\", {\n//       method: 'GET',\n//       headers: {\n//         'Content-type': 'Application/JSON'\n//       }\n//     })\n//       .then(response => {\n//         if (!response.ok) {\n//           throw new Error(`HTTP error! Status: ${response.status}`);\n//         }\n//         return response.json();\n//       })\n//       .then(result => {\n//         console.log(\"Fetched data:\", result);\n//         console.log(\"Departments:\", result.Value);\n//         setOpeningsJson(result.Value);\n//       })\n//       .catch(error => {\n//         console.error('Error fetching data:', error);\n//       });\n//   }\n\n//   useEffect(() => {\n//     console.log(\"json: \" + openingsJson);\n//   }, []);\n\n//   return (\n//     <div>\n      \n//       {!view && openingsJson && (\n//   <div id={Style.applicants}>\n//     <Heading>Openings</Heading>\n\n//     <table>\n//       <thead>\n//         <tr className={Style.openingTr}>\n//           <th>Opening Name</th>\n//           <th>Qualification</th>\n//           <th>Experience</th>\n//           <th>Employment Type</th>\n//           <th>Salary Range</th>\n//           <th>Start_Date</th>\n//           <th>End_Date</th>\n//           <th>Department Name</th>\n//         </tr>\n//       </thead>\n//       <tbody>\n//         {openingsJson.map((item, index) => (\n//           <tr key={index} onClick={() => viewDetails(index)}>\n//             <td>{item.Opening.description}</td>\n//             <td>{item.Opening.qualification}</td>\n//             <td>{item.Opening.experience}</td>\n//             <td>{item.Opening.employmentType}</td>\n//             <td>{item.Opening.salaryRange}</td>\n//             <td>{item.Opening.startDate}</td>\n//             <td>{item.Opening.endDate}</td>\n//             <td>{item.Opening.departments}</td>\n//           </tr>\n//         ))}\n//       </tbody>\n//     </table>\n//   </div>\n// )} {view && openingIndex !== null && (\n//   <div>\n//     <div id={Style.applicantDiv}>\n//       <Heading className={Style.title}><i onClick={backBtn} class=\"fa-regular fa-circle-left\"></i>Tests</Heading>\n//       {/* <Button onClick={backBtn}>Back</Button> */}\n//     </div>\n//     <table>\n//       <thead>\n//         <tr className={Style.openingTr}>\n//           <th>Test Title</th>\n//           <th>Date</th>\n//           <th>Duration</th>\n//         </tr>\n//       </thead>\n//       <tbody>\n//       {openingsJson[openingIndex].Test && Object.keys(openingsJson[openingIndex].Test).length > 0 ? (\n//           <tr>\n//             <td>{openingsJson[openingIndex].Test.testTitle}</td>\n//             <td>{openingsJson[openingIndex].Test.testDate}</td>\n//             <td>{openingsJson[openingIndex].Test.testDuration}</td>\n//           </tr>\n//         ) : (\n//           <tr>\n//             <td colSpan=\"3\">No tests available</td>\n//           </tr>\n//         )}\n//       </tbody>\n//     </table>\n//   </div>\n\n  \n// )}\n\n// {view && openingIndex !== null && (\n//   <div>\n//     <div id={Style.applicantDiv}>\n//       <Heading className={Style.title}><i onClick={backBtn} className=\"fa-regular fa-circle-left\"></i>Panelists</Heading>\n//       {/* <Button onClick={backBtn}>Back</Button> */}\n//     </div>\n//     <table>\n//       <thead>\n//         <tr className={Style.openingTr}>\n//           <th>Name</th>\n//           <th>Email</th>\n//           <th>Position</th>\n//           <th>Gender</th>\n//         </tr>\n//       </thead>\n//       <tbody>\n//         <tr>\n//           <td>{openingsJson[openingIndex].Panelist.panelistName}</td>\n//           <td>{openingsJson[openingIndex].Panelist.panelistEmail}</td>\n//           <td>{openingsJson[openingIndex].Panelist.panelistPosition}</td>\n//           <td>{openingsJson[openingIndex].Panelist.panelistGender}</td>\n//         </tr>\n//       </tbody>\n//     </table>\n//   </div>\n// )}\n\n\n       \n//       </div>\n//   )\n// }\n\n"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}
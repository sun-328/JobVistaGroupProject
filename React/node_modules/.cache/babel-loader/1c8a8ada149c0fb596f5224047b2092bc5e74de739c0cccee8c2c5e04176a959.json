{"ast":null,"code":"var _jsxFileName = \"/home/abi-zstk360/Downloads/RecruitmentProject/Project/myproject/src/Components/BarChart/Chart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Chart from \"chart.js/auto\";\nimport { Doughnut } from \"react-chartjs-2\";\nimport Style from '../BarChart/Bar.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LineChart = () => {\n  _s();\n  const [label, setLabel] = useState([]);\n  const [datavalue, setdatavalue] = useState([]);\n  const domain = localStorage.getItem(\"domain\");\n  const fetchData = () => {\n    fetch(\"http://localhost:8080/JobVista/Graphs\", {\n      method: 'POST',\n      headers: {\n        'Content-type': 'Application/JSON'\n      },\n      body: JSON.stringify({\n        'userDetails': JSON.parse(localStorage.getItem('userDetails'))\n      })\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      return response.json();\n    }).then(result => {\n      console.log(\"chart: \", result);\n      const applicantsStatusGraph = result.applicantsStatusGraph;\n      if (Object.keys(applicantsStatusGraph).length > 0) {\n        const entries = Object.entries(applicantsStatusGraph);\n        if (entries.length === 1) {\n          setLabel(entries.map(([key, _]) => key));\n          setdatavalue(entries.map(([_, value]) => value));\n        } else {\n          const mergedEntry = entries.reduce((acc, [key, value]) => ({\n            ...acc,\n            [key]: value\n          }), {});\n          setLabel(Object.keys(mergedEntry));\n          setdatavalue(Object.values(mergedEntry));\n        }\n      }\n    }).catch(error => {\n      console.error('Error fetching data:', error);\n    });\n  };\n  useEffect(() => {\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: Style.chartId,\n    className: Style.chart,\n    children: label.length > 0 ? /*#__PURE__*/_jsxDEV(Doughnut, {\n      data: {\n        labels: label,\n        datasets: [{\n          label: \"\",\n          data: datavalue,\n          backgroundColor: [\"rgba(255, 99, 132, 0.2)\", \"rgba(54, 162, 235, 0.2)\", \"rgba(255, 206, 86, 0.2)\", \"rgba(75, 192, 192, 0.2)\", \"rgba(153, 102, 255, 0.2)\", \"rgba(255, 159, 64, 0.2)\"],\n          borderColor: [\"rgba(255, 99, 132, 1)\", \"rgba(54, 162, 235, 1)\", \"rgba(255, 206, 86, 1)\", \"rgba(75, 192, 192, 1)\", \"rgba(153, 102, 255, 1)\", \"rgba(255, 159, 64, 1)\"],\n          borderWidth: 1\n        }]\n      },\n      options: {\n        circumference: 180,\n        rotation: 270\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No data available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n_s(LineChart, \"IVnKMsILtEoPOWeGItkL5i9n6N0=\");\n_c = LineChart;\nexport default LineChart;\nvar _c;\n$RefreshReg$(_c, \"LineChart\");","map":{"version":3,"names":["React","useState","useEffect","Chart","Doughnut","Style","jsxDEV","_jsxDEV","LineChart","_s","label","setLabel","datavalue","setdatavalue","domain","localStorage","getItem","fetchData","fetch","method","headers","body","JSON","stringify","parse","then","response","ok","Error","status","json","result","console","log","applicantsStatusGraph","Object","keys","length","entries","map","key","_","value","mergedEntry","reduce","acc","values","catch","error","id","chartId","className","chart","children","data","labels","datasets","backgroundColor","borderColor","borderWidth","options","circumference","rotation","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/abi-zstk360/Downloads/RecruitmentProject/Project/myproject/src/Components/BarChart/Chart.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Chart from \"chart.js/auto\";\nimport { Doughnut } from \"react-chartjs-2\";\nimport Style from '../BarChart/Bar.module.css';\n\n\n\nconst LineChart = () => {\n    const [label, setLabel] = useState([]);\n    const [datavalue, setdatavalue] = useState([]);\n    const domain = localStorage.getItem(\"domain\");\n\n    const fetchData = () => {\n        fetch(\"http://localhost:8080/JobVista/Graphs\", {\n            method: 'POST',\n            headers: {\n                'Content-type': 'Application/JSON'\n            },\n            body: JSON.stringify({ 'userDetails': JSON.parse(localStorage.getItem('userDetails')) })\n        })\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error(`HTTP error! Status: ${response.status}`);\n                }\n                return response.json();\n            })\n            .then(result => {\n                console.log(\"chart: \", result);\n                const applicantsStatusGraph = result.applicantsStatusGraph;\n\n                if ((Object.keys(applicantsStatusGraph)).length > 0) {\n                    const entries = Object.entries(applicantsStatusGraph);\n                    if (entries.length === 1) {\n                        setLabel(entries.map(([key, _]) => key));\n                        setdatavalue(entries.map(([_, value]) => value));\n                    } else {\n                        const mergedEntry = entries.reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\n                        setLabel(Object.keys(mergedEntry));\n                        setdatavalue(Object.values(mergedEntry));\n                    }\n\n\n                }\n\n            })\n            .catch(error => {\n                console.error('Error fetching data:', error);\n            });\n    }\n\n    useEffect(() => {\n        fetchData();\n    }, []);\n\n\n    return (\n        <div id={Style.chartId} className={Style.chart}>\n            {label.length > 0 ? (\n                <Doughnut\n                    data={{\n                        labels: label,\n                        datasets: [{\n                            label: \"\",\n                            data: datavalue,\n                            backgroundColor: [\n                                \"rgba(255, 99, 132, 0.2)\",\n                                \"rgba(54, 162, 235, 0.2)\",\n                                \"rgba(255, 206, 86, 0.2)\",\n                                \"rgba(75, 192, 192, 0.2)\",\n                                \"rgba(153, 102, 255, 0.2)\",\n                                \"rgba(255, 159, 64, 0.2)\"\n                            ],\n                            borderColor: [\n                                \"rgba(255, 99, 132, 1)\",\n                                \"rgba(54, 162, 235, 1)\",\n                                \"rgba(255, 206, 86, 1)\",\n                                \"rgba(75, 192, 192, 1)\",\n                                \"rgba(153, 102, 255, 1)\",\n                                \"rgba(255, 159, 64, 1)\"\n                            ],\n                            borderWidth: 1\n                        }]\n                    }}\n                    options={{\n                        circumference: 180,\n                        rotation: 270\n                    }}\n                />\n            ) : (\n                <p>No data available</p>\n            )}\n        </div>\n    );\n\n};\n\nexport default LineChart;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/home/abi-zstk360/Downloads/RecruitmentProject/Project/myproject/src/Components/TodayOpenings/TodayOpening.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import data from './Openings.json';\n// import { Text } from \"../Text/Text\";\n// import Style from '../TodayOpenings/TodayOpenings.module.css';\n// import { Image } from \"../ImageTag/Image\";\n// import { Heading } from \"../Heading/Heading\";\n\n// export const TodayOpenings = () => {\n\n//     const [openingsJson, setOpeningsJson] = useState([]);\n//     const [selectOpening, setSelectOpening] = useState(-1);\n//     const [profile, setProfile] = useState(false);\n//     const [applicant, setApplicant] = useState([]);\n//     const [selectOption, setSelectOption] = useState(null);\n\n//     const currentDate = new Date();\n//     const currYear = currentDate.getFullYear();\n//     const currMonth = currentDate.getMonth() < 10 ? '0' + (currentDate.getMonth() + 1) : (currentDate.getMonth() + 1);\n//     const currDate = currentDate.getDate() < 10 ? '0' + (currentDate.getDate()) : currentDate.getDate();\n//     const formatDate = `${currYear}-${currMonth}-${currDate}`;\n\n//     const viewProfile = (applicant) => {\n//         setProfile(true);\n//         setApplicant(applicant);\n//     }\n\n//     const handleChange = (event) => {\n//         setSelectOpening(event.target.value);\n//         // console.log(selectOpening);\n//     }\n\n//     const selectResult = (event) => {\n//         setSelectOption(event.target.value);\n//     }\n\n//     useEffect(() => {\n//         const defaultValue = openingsJson.findIndex(element => (\n//             // element.test.some(test => test.Date === formatDate)\n//             element.test.map((sampleTest, ind) => (\n//                 sampleTest.testDate === formatDate\n//             )\n//         )\n//         ))\n//         console.log(\"default: \" , defaultValue);\n//         console.log(selectOpening);\n//         setSelectOpening(defaultValue)\n//         console.log(\"select \" , selectOpening >= 0);\n//         // if(defaultValue >= 0){\n//         //     console.log(\"applicants: \" , openingsJson[defaultValue].applicants[0].map((applicant, idx) => (console.log(applicant.jobSeekerName))));\n\n//         // }\n//         // console.log(\"applicants: \" , openingsJson[defaultValue].applicants);\n\n//     //     opening.test.map((sampleTest, ind) => (\n//     //         sampleTest.testDate === formatDate\n//     // )\n\n//     }, [formatDate, openingsJson, selectOpening])\n\n//     const fetchData = () => {\n//             fetch('http://localhost:8080/JobVista/PanelistOpeningServlet', {\n//                 method: 'GET',\n//                 headers: {\n//                     'Content-type': 'application/json'\n//                 }\n//             })\n//                 .then((response) => {\n//                     if (!response.ok) {\n//                         throw new Error(`HTTP error status: ${response.status}`)\n//                     }\n//                     return response.json();\n//                 })\n//                 .then((result) => {\n//                     console.log(result.Value.upComingOpenings[0].test[0].applicants[0]);\n//                     console.log(\"upcoming: \" , result.Value.upComingOpenings[0].test);\n//                     setOpeningsJson(result.Value.upComingOpenings);\n\n//                     result.Value.upComingOpenings[0].test.map((sampleTest, ind) => {\n\n//                             sampleTest.applicants[0].map((sample, idx) => {\n//                                 console.log(\"name: \", sample.Name);\n//                             });\n\n//                     });\n//                 })\n//                 .catch((error) => {\n//                     console.log(\"Error in get openings \", error);\n//                 })\n//         }\n\n//         useEffect(() => {\n//             fetchData();\n//         }, [])\n\n//         useEffect (() => {\n//             console.log(\"selectOpening: \" , selectOpening);\n\n//             if(selectOpening >= 0){\n\n//                 // openingsJson[selectOpening].test.map((sampleTest, ind) => {\n//                 //     sampleTest.applicants[0].map((sample, idx) => {\n//                 //         console.log(sample.Name);\n//                 //     });\n//                 //     console.log(\"applicants:\");\n//                 // });\n//             }\n//         }, [selectOpening, openingsJson])\n\n//     return (\n//         <div>\n\n//             <select id={Style.select} onChange={handleChange}>\n//                 {openingsJson.map((opening, index) => (\n//                     opening.test.map((sampleTest, ind) => (\n//                         sampleTest.testDate === formatDate && (\n//                             <option key={ind} value={ind}>{sampleTest.testTitle}</option>\n\n//                         )\n//                     ))\n//                 ))}\n\n//             </select>\n\n//             <div id={Style.level}>\n//                 <i class=\"fa-solid fa-chevron-left\"></i>\n\n//                 <Text>Level 1</Text>\n\n//                 {/* {openingsJson.map((element, index) => (\n//                     <Text>Level{element.test[index].roundOn}</Text>\n//                 ))} */}\n\n//                 <i class=\"fa-solid fa-chevron-right\"></i>\n//             </div>\n\n//             {selectOpening !== null && (\n//                 <table>\n\n//                     <tr>\n//                         <th>Name</th>\n//                         <th>Email</th>\n//                         <th>Mobile Number</th>\n//                         <th>Points</th>\n//                         <th>Result</th>\n//                         <th></th>\n//                     </tr>\n//                     <h1>SelectOpening {selectOpening}</h1>\n//                     {selectOpening >= 0 && openingsJson[selectOpening].test > 0 && openingsJson[selectOpening].test.map((sampleTest, ind) => (\n//                         sampleTest.applicants[0].length > 0 && sampleTest.applicants[0].map((sample, idx) => {\n//                             <div>\n\n//                            <tr key={idx} className={Style.hover}>\n//                                 <td>{sample[0].Name}</td>\n//                                 <td>{sample.Email}</td>\n//                                 <td>{sample.Phone}</td>\n//                                 <td>{sample.Points}</td>\n//                                 <td>\n//                                     {!selectOption && (\n//                                         <select onChange={selectResult}>\n//                                             <option>Select</option>\n//                                             <option>Onhold</option>\n//                                             <option>Reject</option>\n//                                         </select>\n//                                     )}\n//                                     {console.log(selectOption)}\n//                                     {selectOption && (\n//                                         <p onClick={() => setSelectOption(false)} id={Style.selectOption}>{selectOption}</p>\n//                                     )}\n//                                 </td>\n//                                 <td className={Style.icon}><i onClick={() => viewProfile(applicant)} id={Style.icon} class=\"fa-solid fa-circle-info\"></i></td>\n\n//                             </tr>\n//                             </div>\n//             })))}\n\n//                     {profile ?\n//                         <div id={Style.viewProfile}>\n//                             <i class=\"fa-solid fa-circle-xmark\" onClick={() => setProfile(false)} id={Style.crossBtn}></i>\n\n//                             <Image id={Style.img} src='../../Images/user.png' />\n\n//                             <Heading id={Style.name}>{applicant.name} - <Text id={Style.email}>{applicant.email}</Text></Heading>\n\n//                             <Text className={Style.fntSize}>Contact - {applicant.mobileNumber}</Text>\n\n//                             <ul>\n//                                 <li className={Style.fontSize}>Social Media Resources: </li>\n//                                 {Object.entries(applicant.socialMediaResorse).map(([key, value]) => (\n//                                     <li className={Style.fntSize} key={key}>{key}: {value}</li>\n//                                 ))}\n//                             </ul>\n//                         </div>\n//                         :\n//                         ''\n//                     }\n//                 </table>\n//             )}\n//         </div>\n//     )\n\n// }\n\n// // \"applicants\": [\n// //                     {\n// //                         \"name\": \"Abi\",\n// //                         \"email\": \"jith@jk.com\",\n// //                         \"socialMediaResorse\": {\n// //                             \"linkedIn\": \"linkedIn.com/jith\",\n// //                             \"github\": \"github.com/jith\"\n// //                         },\n// //                         \"mobileNumber\": 1234567890,\n// //                         \"result\": \"Onhold\",\n// //                         \"points\": 80\n// //                     }\n// //                 ]\n\nimport React, { useState, useEffect } from \"react\";\nimport data from './Openings.json';\nimport { Text } from \"../Text/Text\";\nimport Style from '../TodayOpenings/TodayOpenings.module.css';\nimport { Image } from \"../ImageTag/Image\";\nimport { Heading } from \"../Heading/Heading\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TodayOpenings = () => {\n  _s();\n  const [openingsJson, setOpeningsJson] = useState([]);\n  const [selectOpening, setSelectOpening] = useState(-1);\n  const [profile, setProfile] = useState(false);\n  const [applicant, setApplicant] = useState([]);\n  const [selectOption, setSelectOption] = useState(null);\n  const currentDate = new Date();\n  const formatDate = currentDate.toISOString().slice(0, 10);\n  const viewProfile = applicant => {\n    setProfile(true);\n    setApplicant(applicant);\n  };\n  const handleChange = event => {\n    setSelectOpening(parseInt(event.target.value));\n  };\n  const selectResult = event => {\n    setSelectOption(event.target.value);\n  };\n  useEffect(() => {\n    const defaultValue = openingsJson.findIndex(element => element.test.some(test => test.testDate === formatDate));\n    setSelectOpening(defaultValue);\n  }, [formatDate, openingsJson]);\n  const fetchData = () => {\n    fetch('http://localhost:8080/JobVista/PanelistOpeningServlet', {\n      method: 'GET',\n      headers: {\n        'Content-type': 'application/json'\n      }\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error status: ${response.status}`);\n      }\n      return response.json();\n    }).then(result => {\n      setOpeningsJson(result.Value.upComingOpenings);\n    }).catch(error => {\n      console.log(\"Error in get openings \", error);\n    });\n  };\n  useEffect(() => {\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      id: Style.select,\n      onChange: handleChange,\n      children: openingsJson && openingsJson.map((opening, index) => opening.test.map((sampleTest, ind) => sampleTest.testDate === formatDate && /*#__PURE__*/_jsxDEV(\"option\", {\n        value: ind,\n        children: sampleTest.testTitle\n      }, ind, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 25\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 13\n    }, this), selectOpening >= 0 && /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Mobile Number\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Points\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Result\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: openingsJson[selectOpening].test.map((sampleTest, ind) => sampleTest.applicants[0].map((sample, idx) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          className: Style.hover,\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: sample.Name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: sample.Email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: sample.Phone\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: sample.Points\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [!selectOption && /*#__PURE__*/_jsxDEV(\"select\", {\n              onChange: selectResult,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"Select\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 320,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"Onhold\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 321,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"Reject\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 322,\n                columnNumber: 49\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 319,\n              columnNumber: 45\n            }, this), selectOption && /*#__PURE__*/_jsxDEV(\"p\", {\n              onClick: () => setSelectOption(false),\n              id: Style.selectOption,\n              children: selectOption\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 326,\n              columnNumber: 45\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: Style.icon,\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              onClick: () => viewProfile(sample),\n              className: \"fa-solid fa-circle-info\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 330,\n              columnNumber: 41\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 37\n          }, this)]\n        }, idx, true, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 33\n        }, this)))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 17\n    }, this), profile && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: Style.viewProfile,\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fa-solid fa-circle-xmark\",\n        onClick: () => setProfile(false),\n        id: Style.crossBtn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Image, {\n        id: Style.img,\n        src: \"../../Images/user.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Heading, {\n        id: Style.name,\n        children: [applicant.name, \" - \", /*#__PURE__*/_jsxDEV(Text, {\n          id: Style.email,\n          children: applicant.email\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 65\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        className: Style.fntSize,\n        children: [\"Contact - \", applicant.mobileNumber]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          className: Style.fontSize,\n          children: \"Social Media Resources: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 25\n        }, this), Object.entries(applicant.socialMediaResorse).map(([key, value]) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: Style.fntSize,\n          children: [key, \": \", value]\n        }, key, true, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 29\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 286,\n    columnNumber: 9\n  }, this);\n};\n_s(TodayOpenings, \"LAiGJYkD+RksA7rcMh/lK/Nymtc=\");\n_c = TodayOpenings;\nvar _c;\n$RefreshReg$(_c, \"TodayOpenings\");","map":{"version":3,"names":["React","useState","useEffect","data","Text","Style","Image","Heading","jsxDEV","_jsxDEV","TodayOpenings","_s","openingsJson","setOpeningsJson","selectOpening","setSelectOpening","profile","setProfile","applicant","setApplicant","selectOption","setSelectOption","currentDate","Date","formatDate","toISOString","slice","viewProfile","handleChange","event","parseInt","target","value","selectResult","defaultValue","findIndex","element","test","some","testDate","fetchData","fetch","method","headers","then","response","ok","Error","status","json","result","Value","upComingOpenings","catch","error","console","log","children","id","select","onChange","map","opening","index","sampleTest","ind","testTitle","fileName","_jsxFileName","lineNumber","columnNumber","applicants","sample","idx","className","hover","Name","Email","Phone","Points","onClick","icon","crossBtn","img","src","name","email","fntSize","mobileNumber","fontSize","Object","entries","socialMediaResorse","key","_c","$RefreshReg$"],"sources":["/home/abi-zstk360/Downloads/RecruitmentProject/Project/myproject/src/Components/TodayOpenings/TodayOpening.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import data from './Openings.json';\n// import { Text } from \"../Text/Text\";\n// import Style from '../TodayOpenings/TodayOpenings.module.css';\n// import { Image } from \"../ImageTag/Image\";\n// import { Heading } from \"../Heading/Heading\";\n\n// export const TodayOpenings = () => {\n\n//     const [openingsJson, setOpeningsJson] = useState([]);\n//     const [selectOpening, setSelectOpening] = useState(-1);\n//     const [profile, setProfile] = useState(false);\n//     const [applicant, setApplicant] = useState([]);\n//     const [selectOption, setSelectOption] = useState(null);\n\n//     const currentDate = new Date();\n//     const currYear = currentDate.getFullYear();\n//     const currMonth = currentDate.getMonth() < 10 ? '0' + (currentDate.getMonth() + 1) : (currentDate.getMonth() + 1);\n//     const currDate = currentDate.getDate() < 10 ? '0' + (currentDate.getDate()) : currentDate.getDate();\n//     const formatDate = `${currYear}-${currMonth}-${currDate}`;\n\n//     const viewProfile = (applicant) => {\n//         setProfile(true);\n//         setApplicant(applicant);\n//     }\n\n//     const handleChange = (event) => {\n//         setSelectOpening(event.target.value);\n//         // console.log(selectOpening);\n//     }\n\n//     const selectResult = (event) => {\n//         setSelectOption(event.target.value);\n//     }\n\n//     useEffect(() => {\n//         const defaultValue = openingsJson.findIndex(element => (\n//             // element.test.some(test => test.Date === formatDate)\n//             element.test.map((sampleTest, ind) => (\n//                 sampleTest.testDate === formatDate\n//             )\n//         )\n//         ))\n//         console.log(\"default: \" , defaultValue);\n//         console.log(selectOpening);\n//         setSelectOpening(defaultValue)\n//         console.log(\"select \" , selectOpening >= 0);\n//         // if(defaultValue >= 0){\n//         //     console.log(\"applicants: \" , openingsJson[defaultValue].applicants[0].map((applicant, idx) => (console.log(applicant.jobSeekerName))));\n\n//         // }\n//         // console.log(\"applicants: \" , openingsJson[defaultValue].applicants);\n\n//     //     opening.test.map((sampleTest, ind) => (\n//     //         sampleTest.testDate === formatDate\n//     // )\n\n        \n//     }, [formatDate, openingsJson, selectOpening])\n\n//     const fetchData = () => {\n//             fetch('http://localhost:8080/JobVista/PanelistOpeningServlet', {\n//                 method: 'GET',\n//                 headers: {\n//                     'Content-type': 'application/json'\n//                 }\n//             })\n//                 .then((response) => {\n//                     if (!response.ok) {\n//                         throw new Error(`HTTP error status: ${response.status}`)\n//                     }\n//                     return response.json();\n//                 })\n//                 .then((result) => {\n//                     console.log(result.Value.upComingOpenings[0].test[0].applicants[0]);\n//                     console.log(\"upcoming: \" , result.Value.upComingOpenings[0].test);\n//                     setOpeningsJson(result.Value.upComingOpenings);\n\n//                     result.Value.upComingOpenings[0].test.map((sampleTest, ind) => {\n                       \n//                             sampleTest.applicants[0].map((sample, idx) => {\n//                                 console.log(\"name: \", sample.Name);\n//                             });\n                        \n//                     });\n//                 })\n//                 .catch((error) => {\n//                     console.log(\"Error in get openings \", error);\n//                 })\n//         }\n\n//         useEffect(() => {\n//             fetchData();\n//         }, [])\n\n//         useEffect (() => {\n//             console.log(\"selectOpening: \" , selectOpening);\n            \n\n//             if(selectOpening >= 0){\n                \n//                 // openingsJson[selectOpening].test.map((sampleTest, ind) => {\n//                 //     sampleTest.applicants[0].map((sample, idx) => {\n//                 //         console.log(sample.Name);\n//                 //     });\n//                 //     console.log(\"applicants:\");\n//                 // });\n//             }\n//         }, [selectOpening, openingsJson])\n\n//     return (\n//         <div>\n            \n//             <select id={Style.select} onChange={handleChange}>\n//                 {openingsJson.map((opening, index) => (\n//                     opening.test.map((sampleTest, ind) => (\n//                         sampleTest.testDate === formatDate && (\n//                             <option key={ind} value={ind}>{sampleTest.testTitle}</option>\n                            \n//                         )\n//                     ))\n//                 ))}\n\n\n\n\n//             </select>\n\n//             <div id={Style.level}>\n//                 <i class=\"fa-solid fa-chevron-left\"></i>\n\n//                 <Text>Level 1</Text>\n\n//                 {/* {openingsJson.map((element, index) => (\n//                     <Text>Level{element.test[index].roundOn}</Text>\n//                 ))} */}\n\n//                 <i class=\"fa-solid fa-chevron-right\"></i>\n//             </div>\n\n//             {selectOpening !== null && (\n//                 <table>\n\n//                     <tr>\n//                         <th>Name</th>\n//                         <th>Email</th>\n//                         <th>Mobile Number</th>\n//                         <th>Points</th>\n//                         <th>Result</th>\n//                         <th></th>\n//                     </tr>\n//                     <h1>SelectOpening {selectOpening}</h1>\n//                     {selectOpening >= 0 && openingsJson[selectOpening].test > 0 && openingsJson[selectOpening].test.map((sampleTest, ind) => (\n//                         sampleTest.applicants[0].length > 0 && sampleTest.applicants[0].map((sample, idx) => {\n//                             <div>\n                                \n//                            <tr key={idx} className={Style.hover}>\n//                                 <td>{sample[0].Name}</td>\n//                                 <td>{sample.Email}</td>\n//                                 <td>{sample.Phone}</td>\n//                                 <td>{sample.Points}</td>\n//                                 <td>\n//                                     {!selectOption && (\n//                                         <select onChange={selectResult}>\n//                                             <option>Select</option>\n//                                             <option>Onhold</option>\n//                                             <option>Reject</option>\n//                                         </select>\n//                                     )}\n//                                     {console.log(selectOption)}\n//                                     {selectOption && (\n//                                         <p onClick={() => setSelectOption(false)} id={Style.selectOption}>{selectOption}</p>\n//                                     )}\n//                                 </td>\n//                                 <td className={Style.icon}><i onClick={() => viewProfile(applicant)} id={Style.icon} class=\"fa-solid fa-circle-info\"></i></td>\n\n//                             </tr>\n//                             </div>\n//             })))}\n\n//                     {profile ?\n//                         <div id={Style.viewProfile}>\n//                             <i class=\"fa-solid fa-circle-xmark\" onClick={() => setProfile(false)} id={Style.crossBtn}></i>\n\n//                             <Image id={Style.img} src='../../Images/user.png' />\n\n//                             <Heading id={Style.name}>{applicant.name} - <Text id={Style.email}>{applicant.email}</Text></Heading>\n\n//                             <Text className={Style.fntSize}>Contact - {applicant.mobileNumber}</Text>\n\n//                             <ul>\n//                                 <li className={Style.fontSize}>Social Media Resources: </li>\n//                                 {Object.entries(applicant.socialMediaResorse).map(([key, value]) => (\n//                                     <li className={Style.fntSize} key={key}>{key}: {value}</li>\n//                                 ))}\n//                             </ul>\n//                         </div>\n//                         :\n//                         ''\n//                     }\n//                 </table>\n//             )}\n//         </div>\n//     )\n\n// }\n\n// // \"applicants\": [\n// //                     {\n// //                         \"name\": \"Abi\",\n// //                         \"email\": \"jith@jk.com\",\n// //                         \"socialMediaResorse\": {\n// //                             \"linkedIn\": \"linkedIn.com/jith\",\n// //                             \"github\": \"github.com/jith\"\n// //                         },\n// //                         \"mobileNumber\": 1234567890,\n// //                         \"result\": \"Onhold\",\n// //                         \"points\": 80\n// //                     }\n// //                 ]\n\nimport React, { useState, useEffect } from \"react\";\nimport data from './Openings.json';\nimport { Text } from \"../Text/Text\";\nimport Style from '../TodayOpenings/TodayOpenings.module.css';\nimport { Image } from \"../ImageTag/Image\";\nimport { Heading } from \"../Heading/Heading\";\n\nexport const TodayOpenings = () => {\n\n    const [openingsJson, setOpeningsJson] = useState([]);\n    const [selectOpening, setSelectOpening] = useState(-1);\n    const [profile, setProfile] = useState(false);\n    const [applicant, setApplicant] = useState([]);\n    const [selectOption, setSelectOption] = useState(null);\n\n    const currentDate = new Date();\n    const formatDate = currentDate.toISOString().slice(0, 10);\n\n    const viewProfile = (applicant) => {\n        setProfile(true);\n        setApplicant(applicant);\n    }\n\n    const handleChange = (event) => {\n        setSelectOpening(parseInt(event.target.value));\n    }\n\n    const selectResult = (event) => {\n        setSelectOption(event.target.value);\n    }\n\n    useEffect(() => {\n        const defaultValue = openingsJson.findIndex(element => (\n            element.test.some(test => test.testDate === formatDate)\n        ));\n        setSelectOpening(defaultValue);\n    }, [formatDate, openingsJson])\n\n    const fetchData = () => {\n        fetch('http://localhost:8080/JobVista/PanelistOpeningServlet', {\n            method: 'GET',\n            headers: {\n                'Content-type': 'application/json'\n            }\n        })\n            .then((response) => {\n                if (!response.ok) {\n                    throw new Error(`HTTP error status: ${response.status}`);\n                }\n                return response.json();\n            })\n            .then((result) => {\n                setOpeningsJson(result.Value.upComingOpenings);\n            })\n            .catch((error) => {\n                console.log(\"Error in get openings \", error);\n            })\n    }\n\n    useEffect(() => {\n        fetchData();\n    }, [])\n\n    return (\n        <div>\n            <select id={Style.select} onChange={handleChange}>\n            {openingsJson && openingsJson.map((opening, index) => (\n                opening.test.map((sampleTest, ind) => (\n                    sampleTest.testDate === formatDate && (\n                        <option key={ind} value={ind}>{sampleTest.testTitle}</option>\n                    )\n                ))\n            ))}\n            </select>\n\n            {selectOpening >= 0 && (\n                <table>\n                    <thead>\n                        <tr>\n                            <th>Name</th>\n                            <th>Email</th>\n                            <th>Mobile Number</th>\n                            <th>Points</th>\n                            <th>Result</th>\n                            <th></th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {openingsJson[selectOpening].test.map((sampleTest, ind) => (\n                            sampleTest.applicants[0].map((sample, idx) => (\n                                <tr key={idx} className={Style.hover}>\n                                    <td>{sample.Name}</td>\n                                    <td>{sample.Email}</td>\n                                    <td>{sample.Phone}</td>\n                                    <td>{sample.Points}</td>\n                                    <td>\n                                        {!selectOption && (\n                                            <select onChange={selectResult}>\n                                                <option>Select</option>\n                                                <option>Onhold</option>\n                                                <option>Reject</option>\n                                            </select>\n                                        )}\n                                        {selectOption && (\n                                            <p onClick={() => setSelectOption(false)} id={Style.selectOption}>{selectOption}</p>\n                                        )}\n                                    </td>\n                                    <td className={Style.icon}>\n                                        <i onClick={() => viewProfile(sample)} className=\"fa-solid fa-circle-info\"></i>\n                                    </td>\n                                </tr>\n                            ))\n                        ))}\n                    </tbody>\n                </table>\n            )}\n\n            {profile && (\n                <div id={Style.viewProfile}>\n                    <i className=\"fa-solid fa-circle-xmark\" onClick={() => setProfile(false)} id={Style.crossBtn}></i>\n                    <Image id={Style.img} src='../../Images/user.png' />\n                    <Heading id={Style.name}>{applicant.name} - <Text id={Style.email}>{applicant.email}</Text></Heading>\n                    <Text className={Style.fntSize}>Contact - {applicant.mobileNumber}</Text>\n                    <ul>\n                        <li className={Style.fontSize}>Social Media Resources: </li>\n                        {Object.entries(applicant.socialMediaResorse).map(([key, value]) => (\n                            <li className={Style.fntSize} key={key}>{key}: {value}</li>\n                        ))}\n                    </ul>\n                </div>\n            )}\n        </div>\n    );\n}\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAKA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,iBAAiB;AAClC,SAASC,IAAI,QAAQ,cAAc;AACnC,OAAOC,KAAK,MAAM,2CAA2C;AAC7D,SAASC,KAAK,QAAQ,mBAAmB;AACzC,SAASC,OAAO,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,OAAO,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAE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"},"metadata":{},"sourceType":"module","externalDependencies":[]}